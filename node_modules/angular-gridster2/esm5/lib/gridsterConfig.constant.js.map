{
  "version": 3,
  "file": "gridsterConfig.constant.js",
  "sources": [
    "ng://angular-gridster2/projects/angular-gridster2/src/lib/gridsterConfig.constant.ts"
  ],
  "sourcesContent": [
    "import {CompactType, DisplayGrid, GridsterConfig, GridType} from './gridsterConfig.interface';\n\nexport const GridsterConfigService: GridsterConfig = {\n  gridType: GridType.Fit, // 'fit' will fit the items in the container without scroll;\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250, // fixed col width for gridType: 'fixed'\n  fixedRowHeight: 250, // fixed row height for gridType: 'fixed'\n  keepFixedHeightInMobile: false, // keep the height from fixed gridType in mobile layout\n  keepFixedWidthInMobile: false, // keep the width from fixed gridType in mobile layout\n  setGridSize: false, // sets grid size depending on content\n  compactType: CompactType.None, // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n  mobileBreakpoint: 640, // if the screen is not wider that this, remove the grid layout and stack the items\n  minCols: 1, // minimum amount of columns in the grid\n  maxCols: 100, // maximum amount of columns in the grid\n  minRows: 1, // minimum amount of rows in the grid\n  maxRows: 100, // maximum amount of rows in the grid\n  defaultItemCols: 1, // default width of an item in columns\n  defaultItemRows: 1, // default height of an item in rows\n  maxItemCols: 50, // max item number of cols\n  maxItemRows: 50, // max item number of rows\n  minItemCols: 1, // min item number of columns\n  minItemRows: 1, // min item number of rows\n  minItemArea: 1, // min item area: cols * rows\n  maxItemArea: 2500, // max item area: cols * rows\n  margin: 10,  // margin between grid items\n  outerMargin: true,  // if margins will apply to the sides of the container\n  outerMarginTop: null, // override outer margin for grid\n  outerMarginRight: null, // override outer margin for grid\n  outerMarginBottom: null, // override outer margin for grid\n  outerMarginLeft: null, // override outer margin for grid\n  scrollSensitivity: 10,  // margin of the dashboard where to start scrolling\n  scrollSpeed: 20,  // how much to scroll each mouse move when in the scrollSensitivity zone\n  initCallback: undefined, // callback to call after grid has initialized. Arguments: gridsterComponent\n  destroyCallback: undefined, // callback to call after grid has destroyed. Arguments: gridsterComponent\n  gridSizeChangedCallback: undefined, // callback to call after grid has changed size. Arguments: gridsterComponent\n  itemChangeCallback: undefined,  // callback to call for each item when is changes x, y, rows, cols.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,  // callback to call for each item when width/height changes.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,  // callback to call to validate item position/size. Return true if valid.\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false, // enable empty cell click events\n  enableEmptyCellContextMenu: false, // enable empty cell context menu (right click) events\n  enableEmptyCellDrop: false, // enable empty cell drop events\n  enableEmptyCellDrag: false, // enable empty cell drag events\n  emptyCellClickCallback: undefined, // empty cell click callback\n  emptyCellContextMenuCallback: undefined, // empty cell context menu (right click) callback\n  emptyCellDropCallback: undefined, // empty cell drag drop callback. HTML5 Drag & Drop\n  emptyCellDragCallback: undefined, // empty cell drag and create item like excel cell selection\n  emptyCellDragMaxCols: 50, // limit empty cell drag max cols\n  emptyCellDragMaxRows: 50, // limit empty cell drag max rows\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false, // ignore the gap between rows for items which span multiple rows (see #162, #224)\n  draggable: {\n    delayStart: 0, // milliseconds to delay the start of drag, useful for touch interaction\n    enabled: false, // enable/disable draggable items\n    ignoreContentClass: 'gridster-item-content', // default content class to ignore the drag event from\n    ignoreContent: false, // if true drag will start only from elements from `dragHandleClass`\n    dragHandleClass: 'drag-handler', // drag event only from this class. If `ignoreContent` is true.\n    stop: undefined, // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n    start: undefined, // callback when dragging an item starts.\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false, // enable drop items on top other item\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n  resizable: {\n    delayStart: 0, // milliseconds to delay the start of resize, useful for touch interaction\n    enabled: false, // enable/disable resizable items\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    }, // resizable edges of an item\n    stop: undefined, // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n  swap: true, // allow items to switch position if drop on top of another\n  pushItems: false, // push items when resizing and dragging\n  disablePushOnDrag: false, // disable push on drag\n  disablePushOnResize: false, // disable push on resize\n  pushDirections: {north: true, east: true, south: true, west: true}, // control the directions items are pushed\n  pushResizeItems: false, // on resize of item will shrink adjacent items\n  displayGrid: DisplayGrid.OnDragAndResize, // display background grid of rows and columns\n  disableWindowResize: false, // disable the window on resize listener. This will stop grid to recalculate on window resize.\n  disableWarnings: false, // disable console log warnings about misplacement of grid items\n  scrollToNewItems: false, // scroll to new items placed in a scrollable view\n  disableAutoPositionOnConflict: false  // disable auto-position of items on conflict state\n};\n"
  ],
  "names": [],
  "mappings": "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"
}
