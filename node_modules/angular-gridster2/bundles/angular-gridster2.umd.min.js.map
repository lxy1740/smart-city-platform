{"version":3,"sources":["ng://angular-gridster2/lib/gridsterScroll.service.ts","ng://angular-gridster2/lib/gridsterConfig.interface.ts","ng://angular-gridster2/lib/gridsterConfig.constant.ts","ng://angular-gridster2/lib/gridsterUtils.service.ts","ng://angular-gridster2/lib/gridster.interface.ts","ng://angular-gridster2/lib/gridsterEmptyCell.service.ts","ng://angular-gridster2/lib/gridsterCompact.service.ts","ng://angular-gridster2/lib/gridsterRenderer.service.ts","ng://angular-gridster2/lib/gridster.component.ts","ng://angular-gridster2/lib/gridsterItemComponent.interface.ts","ng://angular-gridster2/lib/gridsterSwap.service.ts","ng://angular-gridster2/lib/gridsterPush.service.ts","ng://angular-gridster2/lib/gridsterDraggable.service.ts","ng://angular-gridster2/lib/gridsterPushResize.service.ts","ng://angular-gridster2/lib/gridsterResizable.service.ts","ng://angular-gridster2/lib/gridsterItem.component.ts","ng://angular-gridster2/lib/gridsterPreview.component.ts","ng://angular-gridster2/lib/gridster.module.ts"],"names":["scrollSensitivity","scrollSpeed","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","GridsterConfigService","gridType","GridType","Fit","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","compactType","CompactType","None","mobileBreakpoint","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","DisplayGrid","OnDragAndResize","disableWindowResize","disableWarnings","scrollToNewItems","disableAutoPositionOnConflict","GridsterUtils","merge","obj1","obj2","properties","p","hasOwnProperty","debounce","func","wait","timeout","context","this","args","arguments","clearTimeout","setTimeout","apply","checkTouchEvent","clientX","touches","length","clientY","changedTouches","checkContentClassForEvent","gridster","$options","checkContentClass","target","currentTarget","checkContentClassForEmptyCellClickEvent","current","contentClass","hasAttribute","getAttribute","split","indexOf","parentNode","compareItems","a","b","y","x","Injectable","GridsterComponentInterface","GridsterEmptyCell","prototype","destroy","initialItem","movingItem","previewStyle","emptyCellExit","updateOptions","_this","emptyCellClick","options","renderer","listen","el","emptyCellClickCb","bind","emptyCellClickTouch","emptyCellContextMenu","emptyCellContextMenuCb","emptyCellDrop","emptyCellDragDrop","zone","runOutsideAngular","emptyCellMove","emptyCellDragOver","emptyCellDrag","emptyCellMouseDown","emptyCellDragTouch","item","getValidItemFromEvent","cdRef","markForCheck","preventDefault","stopPropagation","dataTransfer","dropEffect","emptyCellMMove","emptyCellMouseMove","emptyCellMMoveTouch","emptyCellUp","emptyCellMouseUp","emptyCellUpTouch","oldItem","rect","getBoundingClientRect","scrollLeft","left","scrollTop","top","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","checkCollision","GridsterCompact","checkCompact","CompactUp","checkCompactUp","CompactLeft","checkCompactLeft","CompactUpAndLeft","CompactLeftAndUp","checkCompactItem","moveUpTillCollision","moveLeftTillCollision","widget","widgetMovedUp","l","grid","i","$item","compactEnabled","itemChanged","GridsterRenderer","updateItem","mobile","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","transform","marginBottom","marginRight","columns","updateGridster","addClass","removeClass1","removeClass2","removeClass3","ScrollVertical","ScrollHorizontal","Fixed","VerticalFixed","HorizontalFixed","removeClass","getGridColumnStyle","gridRows","getGridRowStyle","gridColumns","GridsterComponent","nativeElement","JSON","parse","stringify","calculateLayoutDebounce","calculateLayout","curHeight","dragInProgress","emptyCell","compact","gridRenderer","checkCollisionTwoItems","item2","ngOnInit","ngOnChanges","changes","setOptions","api","optionsChanged","resize","onResize","getNextPossiblePosition","getFirstPossiblePosition","getLastPossiblePosition","clientWidth","clientHeight","offsetWidth","offsetHeight","checkIfToResize","windowResize","widgetsIndex","ngOnDestroy","scrollWidth","scrollHeight","setGridDimensions","notPlaced","max","marginWidth","marginHeight","updateGrid","setSize","drag","toggle","addItem","itemComponent","autoPositionItem","console","warn","push","removeItem","splice","collision","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","findItemsWithItem","newItem","startingFrom","colsIndex","rowsIndex","canAddToRows","canAddToColumns","tmpItem","Object","assign","farthestItem","reduce","prev","curr","currCoords","roundingMethod","noLimit","position","positionXToPixels","positionYToPixels","Component","selector","template","styles","encapsulation","ViewEncapsulation","ElementRef","Renderer2","ChangeDetectorRef","NgZone","Input","GridsterItemComponentInterface","GridsterSwap","gridsterItem","swapedItem","swapItems","checkSwapBack","checkSwap","restoreSwapItem","setSwapItem","checkItemChanges","pushedBy","gridsterItemCollision","canBeDragged","gridsterItemCollide","copyCollisionX","copyCollisionY","copyX","copyY","intervalDuration","scroll","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","setInterval","cancelScroll","clearInterval","GridsterPush","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","direction","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","restoreItems","pushedItem","setPushedItems","checkPushBack","change","checkPushedItem","itemCollision","makePush","find","call","lastIndexOf","j","pop","removeFromPushedItem","addToTempPushed","addToPushed","tempPosition","removeFromPushed","lastPosition","path","GridsterDraggable","mousedown","touchstart","dragStart","which","dragFunction","dragMove","dragStopFunction","dragStop","mousemove","touchmove","mouseup","cancelOnBlur","touchend","touchcancel","diffLeft","diffTop","calculateItemPositionFromMousePosition","run","Promise","resolve","then","makeDrag","cancelDrag","positionX","positionY","positionXBackup","positionYBackup","enableDrag","dragStartFunction","dragStartDelay","cancelMouse","cancelTouchMove","eventMove","cancelTouchEnd","cancelTouchCancel","GridsterPushResize","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterResizable","itemBackup","bottom","right","diffRight","diffBottom","minHeight","minWidth","pushResize","directionFunction","handleN","handleW","handleS","handleE","handleNW","handleNE","handleSW","handleSE","makeResize","cancelResize","newPosition","setItemTop","setItemHeight","setItemLeft","setItemWidth","ceil","resizeEnabled","GridsterItemComponent","dragEnabled","updateItemSize","init","scrollIntoView","newValue","oldValue","decorators","type","Host","GridsterPreviewComponent","GridsterModule","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap"],"mappings":"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C,SAASrF,kBACXuE,KAAKa,SAASC,SAAStF,iBAAmB,KAE1CwE,KAAKa,SAASC,SAASzF,OAAS,OAKpDuH,EAASqE,SAASnE,EAAI,gBAAiB2E,GACvC7E,EAASqE,SAASnE,EAAI,eAAgB4E,KAI1CZ,EAAA5E,UAAA0F,eAAA,WACE,IAAIC,EAAW,GACXC,EAAe,GACfC,EAAe,GACfC,EAAe,GACfhI,KAAKa,SAASC,SAASjH,WAAaC,EAASC,KAC/C8N,EAAW/N,EAASC,IACpB+N,EAAehO,EAASmO,eACxBF,EAAejO,EAASoO,iBACxBF,EAAelO,EAASqO,OACfnI,KAAKa,SAASC,SAASjH,WAAaC,EAASmO,gBACtDjI,KAAKa,SAASwG,aAAerH,KAAKa,SAASuG,YAC3CS,EAAW/N,EAASmO,eACpBH,EAAehO,EAASC,IACxBgO,EAAejO,EAASoO,iBACxBF,EAAelO,EAASqO,OACfnI,KAAKa,SAASC,SAASjH,WAAaC,EAASoO,kBACtDlI,KAAKa,SAASuG,YAAcpH,KAAKa,SAASwG,aAC1CQ,EAAW/N,EAASoO,iBACpBJ,EAAehO,EAASC,IACxBgO,EAAejO,EAASmO,eACxBD,EAAelO,EAASqO,OACfnI,KAAKa,SAASC,SAASjH,WAAaC,EAASqO,OACtDnI,KAAKa,SAASuG,YAAcpH,KAAKa,SAASC,SAAS9G,eAChDgG,KAAKa,SAASC,SAAShE,kBAAoB,EAAIkD,KAAKa,SAASC,SAASzF,QACzE2E,KAAKa,SAASwG,aAAerH,KAAKa,SAASC,SAAS7G,gBACjD+F,KAAKa,SAASC,SAAShE,kBAAoB,EAAIkD,KAAKa,SAASC,SAASzF,QACzEwM,EAAW/N,EAASqO,MACpBL,EAAehO,EAASC,IACxBgO,EAAejO,EAASmO,eACxBD,EAAelO,EAASoO,kBACflI,KAAKa,SAASC,SAASjH,WAAaC,EAASsO,eACtDpI,KAAKa,SAASwG,aAAerH,KAAKa,SAASC,SAAS7G,gBACjD+F,KAAKa,SAASC,SAAShE,kBAAoB,EAAIkD,KAAKa,SAASC,SAASzF,QACzEwM,EAAW/N,EAASmO,eACpBH,EAAehO,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","sourcesContent":["import {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nlet scrollSensitivity: number;\nlet scrollSpeed: number;\nconst intervalDuration = 50;\nlet gridsterElement: any;\nlet resizeEvent: boolean | undefined;\nlet resizeEventType: GridsterResizeEventType | undefined;\nlet intervalE: number;\nlet intervalW: number;\nlet intervalN: number;\nlet intervalS: number;\n\nexport function scroll(gridster: GridsterComponentInterface, left: number, top: number, width: number, height: number,\n                       e: MouseEvent, lastMouse: any,\n                       calculateItemPosition: Function, resize?: boolean, resizeEventScrollType?: GridsterResizeEventType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n  if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n    cancelN();\n    if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n      return;\n    }\n    intervalS = startVertical(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n    cancelS();\n    if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n      return;\n    }\n    intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY !== e.clientY) {\n    cancelVertical();\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n  if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n    cancelW();\n    if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n      return;\n    }\n    intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n    cancelE();\n    if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n      return;\n    }\n    intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX !== e.clientX) {\n    cancelHorizontal();\n  }\n}\n\nfunction startVertical(sign: number, calculateItemPosition: Function, lastMouse: any): any {\n  let clientY = lastMouse.clientY;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({clientX: lastMouse.clientX, clientY: clientY});\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign: number, calculateItemPosition: Function, lastMouse: any): any {\n  let clientX = lastMouse.clientX;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({clientX: clientX, clientY: lastMouse.clientY});\n  }, intervalDuration);\n}\n\nexport function cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = undefined;\n}\n\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n","import {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport type gridTypes = 'fit' | 'scrollVertical' | 'scrollHorizontal' | 'fixed' | 'verticalFixed' | 'horizontalFixed';\nexport type displayGrids = 'always' | 'onDrag&Resize' | 'none';\nexport type compactTypes = 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up';\n\nexport enum GridType {\n  Fit = 'fit',\n  ScrollVertical = 'scrollVertical',\n  ScrollHorizontal = 'scrollHorizontal',\n  Fixed = 'fixed',\n  VerticalFixed = 'verticalFixed',\n  HorizontalFixed = 'horizontalFixed'\n}\n\nexport enum DisplayGrid {\n  Always = 'always',\n  OnDragAndResize = 'onDrag&Resize',\n  None = 'none'\n}\n\nexport enum CompactType {\n  None = 'none',\n  CompactUp = 'compactUp',\n  CompactLeft = 'compactLeft',\n  CompactUpAndLeft = 'compactUp&Left',\n  CompactLeftAndUp = 'compactLeft&Up'\n}\n\nexport interface GridsterConfig {\n  gridType?: gridTypes;\n  fixedColWidth?: number;\n  fixedRowHeight?: number;\n  keepFixedHeightInMobile?: boolean;\n  keepFixedWidthInMobile?: boolean;\n  setGridSize?: boolean;\n  compactType?: compactTypes;\n  mobileBreakpoint?: number;\n  minCols?: number;\n  maxCols?: number;\n  minRows?: number;\n  maxRows?: number;\n  defaultItemCols?: number;\n  defaultItemRows?: number;\n  maxItemCols?: number;\n  maxItemRows?: number;\n  minItemCols?: number;\n  minItemRows?: number;\n  minItemArea?: number;\n  maxItemArea?: number;\n  margin?: number;\n  outerMargin?: boolean;\n  outerMarginTop?: number | null;\n  outerMarginRight?: number | null;\n  outerMarginBottom?: number | null;\n  outerMarginLeft?: number | null;\n  scrollSensitivity?: number | null;\n  scrollSpeed?: number;\n  initCallback?: (gridster: GridsterComponentInterface) => void;\n  destroyCallback?: (gridster: GridsterComponentInterface) => void;\n  gridSizeChangedCallback?: (gridster: GridsterComponentInterface) => void;\n  itemChangeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemResizeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemInitCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemRemovedCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemValidateCallback?: (item: GridsterItem) => boolean;\n  draggable?: Draggable;\n  resizable?: Resizable;\n  swap?: boolean;\n  pushItems?: boolean;\n  disablePushOnDrag?: boolean;\n  disablePushOnResize?: boolean;\n  disableAutoPositionOnConflict?: boolean;\n  pushDirections?: PushDirections;\n  pushResizeItems?: boolean;\n  displayGrid?: displayGrids;\n  disableWindowResize?: boolean;\n  disableWarnings?: boolean;\n  scrollToNewItems?: boolean;\n  enableEmptyCellClick?: boolean;\n  enableEmptyCellContextMenu?: boolean;\n  enableEmptyCellDrop?: boolean;\n  enableEmptyCellDrag?: boolean;\n  emptyCellClickCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellContextMenuCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDropCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragMaxCols?: number;\n  emptyCellDragMaxRows?: number;\n  ignoreMarginInRow?: boolean;\n  api?: {\n    resize?: () => void,\n    optionsChanged?: () => void,\n    getNextPossiblePosition?: (newItem: GridsterItem) => boolean,\n    getFirstPossiblePosition?: (item: GridsterItem) => GridsterItem,\n    getLastPossiblePosition?: (item: GridsterItem) => GridsterItem,\n  };\n\n  [propName: string]: any;\n}\n\nexport interface DragBase {\n  enabled?: boolean;\n  stop?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => Promise<any> | void;\n  start?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => void;\n  delayStart?: number;\n}\n\nexport interface Draggable extends DragBase {\n  ignoreContentClass?: string;\n  ignoreContent?: boolean;\n  dragHandleClass?: string;\n  dropOverItems?: boolean;\n  dropOverItemsCallback?: (source: GridsterItem, target: GridsterItem, grid?: GridsterComponentInterface) => void;\n}\n\nexport interface Resizable extends DragBase {\n  handles?: {\n    s: boolean,\n    e: boolean,\n    n: boolean,\n    w: boolean,\n    se: boolean,\n    ne: boolean,\n    sw: boolean,\n    nw: boolean\n  };\n}\n\nexport interface PushDirections {\n  north: boolean;\n  east: boolean;\n  south: boolean;\n  west: boolean;\n}\n","import {CompactType, DisplayGrid, GridsterConfig, GridType} from './gridsterConfig.interface';\n\nexport const GridsterConfigService: GridsterConfig = {\n  gridType: GridType.Fit, // 'fit' will fit the items in the container without scroll;\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250, // fixed col width for gridType: 'fixed'\n  fixedRowHeight: 250, // fixed row height for gridType: 'fixed'\n  keepFixedHeightInMobile: false, // keep the height from fixed gridType in mobile layout\n  keepFixedWidthInMobile: false, // keep the width from fixed gridType in mobile layout\n  setGridSize: false, // sets grid size depending on content\n  compactType: CompactType.None, // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n  mobileBreakpoint: 640, // if the screen is not wider that this, remove the grid layout and stack the items\n  minCols: 1, // minimum amount of columns in the grid\n  maxCols: 100, // maximum amount of columns in the grid\n  minRows: 1, // minimum amount of rows in the grid\n  maxRows: 100, // maximum amount of rows in the grid\n  defaultItemCols: 1, // default width of an item in columns\n  defaultItemRows: 1, // default height of an item in rows\n  maxItemCols: 50, // max item number of cols\n  maxItemRows: 50, // max item number of rows\n  minItemCols: 1, // min item number of columns\n  minItemRows: 1, // min item number of rows\n  minItemArea: 1, // min item area: cols * rows\n  maxItemArea: 2500, // max item area: cols * rows\n  margin: 10,  // margin between grid items\n  outerMargin: true,  // if margins will apply to the sides of the container\n  outerMarginTop: null, // override outer margin for grid\n  outerMarginRight: null, // override outer margin for grid\n  outerMarginBottom: null, // override outer margin for grid\n  outerMarginLeft: null, // override outer margin for grid\n  scrollSensitivity: 10,  // margin of the dashboard where to start scrolling\n  scrollSpeed: 20,  // how much to scroll each mouse move when in the scrollSensitivity zone\n  initCallback: undefined, // callback to call after grid has initialized. Arguments: gridsterComponent\n  destroyCallback: undefined, // callback to call after grid has destroyed. Arguments: gridsterComponent\n  gridSizeChangedCallback: undefined, // callback to call after grid has changed size. Arguments: gridsterComponent\n  itemChangeCallback: undefined,  // callback to call for each item when is changes x, y, rows, cols.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,  // callback to call for each item when width/height changes.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,  // callback to call to validate item position/size. Return true if valid.\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false, // enable empty cell click events\n  enableEmptyCellContextMenu: false, // enable empty cell context menu (right click) events\n  enableEmptyCellDrop: false, // enable empty cell drop events\n  enableEmptyCellDrag: false, // enable empty cell drag events\n  emptyCellClickCallback: undefined, // empty cell click callback\n  emptyCellContextMenuCallback: undefined, // empty cell context menu (right click) callback\n  emptyCellDropCallback: undefined, // empty cell drag drop callback. HTML5 Drag & Drop\n  emptyCellDragCallback: undefined, // empty cell drag and create item like excel cell selection\n  emptyCellDragMaxCols: 50, // limit empty cell drag max cols\n  emptyCellDragMaxRows: 50, // limit empty cell drag max rows\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false, // ignore the gap between rows for items which span multiple rows (see #162, #224)\n  draggable: {\n    delayStart: 0, // milliseconds to delay the start of drag, useful for touch interaction\n    enabled: false, // enable/disable draggable items\n    ignoreContentClass: 'gridster-item-content', // default content class to ignore the drag event from\n    ignoreContent: false, // if true drag will start only from elements from `dragHandleClass`\n    dragHandleClass: 'drag-handler', // drag event only from this class. If `ignoreContent` is true.\n    stop: undefined, // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n    start: undefined, // callback when dragging an item starts.\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false, // enable drop items on top other item\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n  resizable: {\n    delayStart: 0, // milliseconds to delay the start of resize, useful for touch interaction\n    enabled: false, // enable/disable resizable items\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    }, // resizable edges of an item\n    stop: undefined, // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n  swap: true, // allow items to switch position if drop on top of another\n  pushItems: false, // push items when resizing and dragging\n  disablePushOnDrag: false, // disable push on drag\n  disablePushOnResize: false, // disable push on resize\n  pushDirections: {north: true, east: true, south: true, west: true}, // control the directions items are pushed\n  pushResizeItems: false, // on resize of item will shrink adjacent items\n  displayGrid: DisplayGrid.OnDragAndResize, // display background grid of rows and columns\n  disableWindowResize: false, // disable the window on resize listener. This will stop grid to recalculate on window resize.\n  disableWarnings: false, // disable console log warnings about misplacement of grid items\n  scrollToNewItems: false, // scroll to new items placed in a scrollable view\n  disableAutoPositionOnConflict: false  // disable auto-position of items on conflict state\n};\n","import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterUtils {\n\n  static merge(obj1: any, obj2: any, properties: any) {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  }\n\n  static debounce(func: Function, wait: number): () => void {\n    let timeout: any;\n    return function () {\n      const context = this, args = arguments;\n      const later = function () {\n        timeout = null;\n        func.apply(context, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  static checkTouchEvent(e: any): void {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster: GridsterComponentInterface, e: any): boolean {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster: GridsterComponentInterface, e: any): boolean {\n    return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\n      || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkContentClass(target: any, current: any, contentClass: string): boolean {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a: { x: number, y: number }, b: { x: number, y: number }): number {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n","import {GridsterConfigS} from './gridsterConfigS.interface';\nimport {ChangeDetectorRef, NgZone, Renderer2} from '@angular/core';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\n\nexport abstract class GridsterComponentInterface {\n  $options: GridsterConfigS;\n  grid: Array<GridsterItemComponentInterface>;\n  checkCollision: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  positionXToPixels: (x: number) => number;\n  pixelsToPositionX: (x: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  positionYToPixels: (y: number) => number;\n  pixelsToPositionY: (y: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  findItemWithItem: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  findItemsWithItem: (item: GridsterItem) => Array<GridsterItemComponentInterface>;\n  checkGridCollision: (item: GridsterItem) => boolean;\n  el: any;\n  renderer: Renderer2;\n  gridRenderer: GridsterRenderer;\n  cdRef: ChangeDetectorRef;\n  options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  updateGrid: () => void;\n  movingItem: GridsterItem | null;\n  addItem: (item: GridsterItemComponentInterface) => void;\n  removeItem: (item: GridsterItemComponentInterface) => void;\n  previewStyle: (drag?: boolean) => void;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  windowResize: (() => void) | null;\n  setGridDimensions: (() => void);\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  zone: NgZone;\n  gridRows: Array<number>;\n  gridColumns: Array<number>;\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterEmptyCell {\n  initialItem: GridsterItem | null;\n  emptyCellClick: Function | null;\n  emptyCellClickTouch: Function | null;\n  emptyCellContextMenu: Function | null;\n  emptyCellDrop: Function | null;\n  emptyCellDrag: Function | null;\n  emptyCellDragTouch: Function | null;\n  emptyCellMMove: Function;\n  emptyCellMMoveTouch: Function;\n  emptyCellUp: Function;\n  emptyCellUpTouch: Function;\n  emptyCellMove: Function | null;\n  emptyCellExit: Function | null;\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.initialItem;\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridster;\n    if (this.emptyCellExit) {\n      this.emptyCellExit();\n      this.emptyCellExit = null;\n    }\n  }\n\n  updateOptions(): void {\n    if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n      this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n      this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n      this.emptyCellClick();\n      this.emptyCellClickTouch();\n      this.emptyCellClick = null;\n      this.emptyCellClickTouch = null;\n    }\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n      this.gridster.options.emptyCellContextMenuCallback) {\n      this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n      this.emptyCellContextMenu();\n      this.emptyCellContextMenu = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n      this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n      this.gridster.zone.runOutsideAngular(() => {\n        this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n      });\n      this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n      this.emptyCellDrop();\n      this.emptyCellMove();\n      this.emptyCellExit();\n      this.emptyCellMove = null;\n      this.emptyCellDrop = null;\n      this.emptyCellExit = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n      this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n      this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n      this.emptyCellDrag();\n      this.emptyCellDragTouch();\n      this.emptyCellDrag = null;\n      this.emptyCellDragTouch = null;\n    }\n  }\n\n  emptyCellClickCb(e: any): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellClickCallback) {\n      this.gridster.options.emptyCellClickCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellContextMenuCb(e: any): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellContextMenuCallback) {\n      this.gridster.options.emptyCellContextMenuCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragDrop(e: any): void {\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellDropCallback) {\n      this.gridster.options.emptyCellDropCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragOver(e: any): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (item) {\n      e.dataTransfer.dropEffect = 'move';\n      this.gridster.movingItem = item;\n    } else {\n      e.dataTransfer.dropEffect = 'none';\n      this.gridster.movingItem = null;\n    }\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseDown(e: any): void {\n    if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    this.initialItem = item;\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n    this.gridster.zone.runOutsideAngular(() => {\n      this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n      this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n    });\n    this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n    this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n  }\n\n  emptyCellMouseMove(e: any): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (!item) {\n      return;\n    }\n\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseUp(e: any): void {\n    this.emptyCellMMove();\n    this.emptyCellMMoveTouch();\n    this.emptyCellUp();\n    this.emptyCellUpTouch();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (item) {\n      this.gridster.movingItem = item;\n    }\n    if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n      this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n    }\n    setTimeout(() => {\n      this.initialItem = null;\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n    this.gridster.cdRef.markForCheck();\n  }\n\n  getValidItemFromEvent(e: any, oldItem?: GridsterItem | null): GridsterItem | undefined {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.$options.margin;\n    const y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.$options.margin;\n    const item: GridsterItem = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n    if (this.gridster.checkCollision(item)) {\n      return;\n    }\n    return item;\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterItem} from './gridsterItem.interface';\nimport {CompactType} from './gridsterConfig.interface';\n\n@Injectable()\nexport class GridsterCompact {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  checkCompact(): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactUp();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactUp();\n        this.checkCompactLeft();\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactLeft();\n        this.checkCompactUp();\n      }\n    }\n  }\n\n  checkCompactItem(item: GridsterItem): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveUpTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveUpTillCollision(item);\n        this.moveLeftTillCollision(item);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveLeftTillCollision(item);\n        this.moveUpTillCollision(item);\n      }\n    }\n  }\n\n  checkCompactUp(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveUpTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.y = widget.$item.y;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveUpTillCollision(item: GridsterItem): boolean {\n    item.y -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.y += 1;\n      return false;\n    } else {\n      this.moveUpTillCollision(item);\n      return true;\n    }\n  }\n\n  checkCompactLeft(): void {\n    let widgetMovedUp = false, widget: GridsterItemComponentInterface, moved: boolean;\n    const l = this.gridster.grid.length;\n    for (let i = 0; i < l; i++) {\n      widget = this.gridster.grid[i];\n      if (widget.$item.compactEnabled === false) {\n        continue;\n      }\n      moved = this.moveLeftTillCollision(widget.$item);\n      if (moved) {\n        widgetMovedUp = true;\n        widget.item.x = widget.$item.x;\n        widget.itemChanged();\n      }\n    }\n    if (widgetMovedUp) {\n      this.checkCompact();\n    }\n  }\n\n  moveLeftTillCollision(item: GridsterItem): boolean {\n    item.x -= 1;\n    if (this.gridster.checkCollision(item)) {\n      item.x += 1;\n      return false;\n    } else {\n      this.moveLeftTillCollision(item);\n      return true;\n    }\n  }\n}\n","import {Injectable, Renderer2} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridType} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Injectable()\nexport class GridsterRenderer {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    delete this.gridster;\n  }\n\n  updateItem(el: any, item: GridsterItem, renderer: Renderer2) {\n    if (this.gridster.mobile) {\n      renderer.setStyle(el, 'transform', '');\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\n      } else {\n        renderer.setStyle(el, 'height', (this.gridster.curWidth / 2 * item.rows) + 'px');\n      }\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, 'margin-right', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n      const transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom: string | null = null;\n      let marginRight: string | null = null;\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, 'margin-right', marginRight);\n    }\n  }\n\n  updateGridster() {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      this.gridster.curColWidth = this.gridster.curRowHeight;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i: number) {\n    return {\n      transform: 'translateX(' + this.gridster.curColWidth * i + 'px)',\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getGridRowStyle(i: number) {\n    return {\n      transform: 'translateY(' + this.gridster.curRowHeight * i + 'px)',\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {GridsterConfigService} from './gridsterConfig.constant';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfigS} from './gridsterConfigS.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\nimport {GridsterItem} from './gridsterItem.interface';\n\n@Component({\n  selector: 'gridster',\n  template: `<div class=\"gridster-column\" *ngFor=\"let column of gridColumns; let i = index;\"\n     [ngStyle]=\"gridRenderer.getGridColumnStyle(i)\"></div>\n<div class=\"gridster-row\" *ngFor=\"let row of gridRows; let i = index;\"\n     [ngStyle]=\"gridRenderer.getGridRowStyle(i)\"></div>\n<ng-content></ng-content>\n<gridster-preview class=\"gridster-preview\"></gridster-preview>\n`,\n  styles: [`gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterComponent implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface {\n  @Input() options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  movingItem: GridsterItem | null;\n  previewStyle: () => void;\n  el: any;\n  $options: GridsterConfigS;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  grid: Array<GridsterItemComponentInterface>;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  gridColumns = [];\n  gridRows = [];\n  windowResize: (() => void) | null;\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  gridRenderer: GridsterRenderer;\n\n  constructor(el: ElementRef, public renderer: Renderer2, public cdRef: ChangeDetectorRef, public zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  }\n\n  static checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n    return item.x < item2.x + item2.cols\n      && item.x + item.cols > item2.x\n      && item.y < item2.y + item2.rows\n      && item.y + item.rows > item2.y;\n  }\n\n  ngOnInit(): void {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged.bind(this),\n        resize: this.onResize.bind(this),\n        getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n        getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n        getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  resize(): void {\n    let height;\n    let width;\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n\n  setOptions(): void {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n    this.emptyCell.updateOptions();\n  }\n\n  optionsChanged(): void {\n    this.setOptions();\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.updateOptions();\n    }\n    this.calculateLayout();\n  }\n\n  ngOnDestroy(): void {\n    if (this.windowResize) {\n      this.windowResize();\n    }\n    if (this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n    if (this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n    this.emptyCell.destroy();\n    delete this.emptyCell;\n    this.compact.destroy();\n    delete this.compact;\n  }\n\n  onResize(): void {\n    this.setGridSize();\n    this.calculateLayout();\n  }\n\n  checkIfToResize(): boolean {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n      && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight\n      && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n    if (verticalScrollPresent) {\n      return false;\n    }\n    return !horizontalScrollPresent;\n  }\n\n  setGridSize(): void {\n    let width = this.el.clientWidth;\n    let height = this.el.clientHeight;\n    if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n\n  setGridDimensions(): void {\n    this.setGridSize();\n    if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n    let rows = this.$options.minRows, columns = this.$options.minCols;\n\n    let widgetsIndex = this.grid.length - 1, widget;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n\n  calculateLayout(): void {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n\n    this.setGridDimensions();\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n      this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n    this.gridRenderer.updateGridster();\n\n    this.updateGrid();\n\n    if (this.$options.setGridSize) {\n      this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n      this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n    } else {\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n\n    setTimeout(this.resize.bind(this), 100);\n  }\n\n  updateGrid(): void {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n    this.setGridDimensions();\n    this.gridColumns.length = Math.max(this.columns, Math.floor(this.curWidth / this.curColWidth)) || 0;\n    this.gridRows.length = Math.max(this.rows, Math.floor(this.curHeight / this.curRowHeight)) || 0;\n    this.cdRef.markForCheck();\n  }\n\n  addItem(itemComponent: GridsterItemComponentInterface): void {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n    this.grid.push(itemComponent);\n    this.calculateLayoutDebounce();\n  }\n\n  removeItem(itemComponent: GridsterItemComponentInterface): void {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayoutDebounce();\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n\n  checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let collision: GridsterItemComponentInterface | boolean = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n\n  checkGridCollision(item: GridsterItem): boolean {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n\n  findItemWithItem(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n\n  findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n    const a: Array<GridsterItemComponentInterface> = [];\n    let widgetsIndex: number = this.grid.length - 1, widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n    return a;\n  }\n\n  autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n      if (!this.$options.disableWarnings) {\n        console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n\n  getNextPossiblePosition(newItem: GridsterItem, startingFrom: { y?: number, x?: number } = {}): boolean {\n    if (newItem.cols === -1) {\n      newItem.cols = this.$options.defaultItemCols;\n    }\n    if (newItem.rows === -1) {\n      newItem.rows = this.$options.defaultItemRows;\n    }\n    this.setGridDimensions();\n    let rowsIndex = startingFrom.y || 0, colsIndex;\n    for (; rowsIndex < this.rows; rowsIndex++) {\n      newItem.y = rowsIndex;\n      colsIndex = startingFrom.x || 0;\n      for (; colsIndex < this.columns; colsIndex++) {\n        newItem.x = colsIndex;\n        if (!this.checkCollision(newItem)) {\n          return true;\n        }\n      }\n    }\n    const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n    const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n    const addToRows = this.rows <= this.columns && canAddToRows;\n    if (!addToRows && canAddToColumns) {\n      newItem.x = this.columns;\n      newItem.y = 0;\n      return true;\n    } else if (canAddToRows) {\n      newItem.y = this.rows;\n      newItem.x = 0;\n      return true;\n    }\n    return false;\n  }\n\n  getFirstPossiblePosition(item: GridsterItem): GridsterItem {\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem);\n    return tmpItem;\n  }\n\n  getLastPossiblePosition(item: GridsterItem): GridsterItem {\n    let farthestItem: { y: number, x: number } = {y: 0, x: 0};\n    farthestItem = this.grid.reduce((prev: any, curr: GridsterItemComponentInterface) => {\n      const currCoords = {y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1};\n      if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n        return currCoords;\n      } else {\n        return prev;\n      }\n    }, farthestItem);\n\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem, farthestItem);\n    return tmpItem;\n  }\n\n  pixelsToPositionX(x: number, roundingMethod: Function, noLimit?: boolean): number {\n    const position = roundingMethod(x / this.curColWidth);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  pixelsToPositionY(y: number, roundingMethod: Function, noLimit?: boolean): number {\n    const position = roundingMethod(y / this.curRowHeight);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  positionXToPixels(x: number): number {\n    return x * this.curColWidth;\n  }\n\n  positionYToPixels(y: number): number {\n    return y * this.curRowHeight;\n  }\n}\n","import {GridsterItem} from './gridsterItem.interface';\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {Renderer2} from '@angular/core';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport abstract class GridsterItemComponentInterface {\n  item: GridsterItem;\n  $item: GridsterItem;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  updateOptions: () => void;\n  itemChanged: () => void;\n  setSize: () => void;\n  checkItemChanges: (newValue: GridsterItem, oldValue: GridsterItem) => void;\n  canBeDragged: () => boolean;\n  canBeResized: () => boolean;\n  el: any;\n  gridster: GridsterComponentInterface;\n  renderer: Renderer2;\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterSwap {\n  private swapedItem: GridsterItemComponentInterface | undefined;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n    delete this.swapedItem;\n  }\n\n  swapItems(): void {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack(): void {\n    if (this.swapedItem) {\n      const x: number = this.swapedItem.$item.x;\n      const y: number = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n\n    }\n  }\n\n  restoreSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy: GridsterItemComponentInterface): void {\n    const gridsterItemCollision: any = this.gridster.checkCollision(pushedBy.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide: GridsterItemComponentInterface = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n      gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n      pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n      pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n      }\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterPush {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsTemp: Array<GridsterItemComponentInterface>;\n  private pushedItemsTempPath: Array<Array<{ x: number, y: number }>>;\n  private pushedItemsPath: Array<Array<{ x: number, y: number }>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private pushedItemsOrder: Array<GridsterItemComponentInterface>;\n  private tryPattern: {\n    fromEast: Array<Function>,\n    fromWest: Array<Function>,\n    fromNorth: Array<Function>,\n    fromSouth: Array<Function>,\n    [key: string]: Array<Function>\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string, disable?: boolean): boolean {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      const pushed = this.push(this.gridsterItem, direction);\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems(): void {\n    let i = this.pushedItemsTemp.length - 1;\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n    if (direction === '') {\n      return false;\n    }\n    const a: Array<GridsterItemComponentInterface> = this.gridster.findItemsWithItem(gridsterItem.$item);\n    let i = a.length - 1, itemCollision: GridsterItemComponentInterface;\n    let makePush = true;\n    const b: Array<GridsterItemComponentInterface> = [];\n    for (; i > -1; i--) {\n      itemCollision = a[i];\n      if (itemCollision === this.gridsterItem) {\n        makePush = false;\n        break;\n      }\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n      const compare = this.pushedItemsTemp.find((el: GridsterItemComponentInterface) => {\n        return el.$item.x === itemCollision.$item.x && el.$item.y === itemCollision.$item.y;\n      });\n      if (compare) {\n        makePush = false;\n        break;\n      }\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        b.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(b[0]);\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n    return makePush;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private addToTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n    this.pushedItemsTempPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n  }\n\n  private removeFromTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n    if (!tempPosition) {\n      return;\n    }\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0},\n        {x: gridsterItem.$item.x, y: gridsterItem.$item.y}]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private removeFromPushedItem(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItems.indexOf(gridsterItem);\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition, x, y;\n    let change = false;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n    return change;\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\n\nimport {GridsterSwap} from './gridsterSwap.service';\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterDraggable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  offsetLeft: number;\n  offsetTop: number;\n  margin: number;\n  diffTop: number;\n  diffLeft: number;\n  top: number;\n  left: number;\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  positionXBackup: number;\n  positionYBackup: number;\n  enabled: boolean;\n  dragStartFunction: (event: any) => void;\n  dragFunction: (event: any) => void;\n  dragStopFunction: (event: any) => void;\n  mousemove: Function;\n  mouseup: Function;\n  cancelOnBlur: Function;\n  touchmove: Function;\n  touchend: Function;\n  touchcancel: Function;\n  mousedown: Function;\n  touchstart: Function;\n  push: GridsterPush;\n  swap: GridsterSwap;\n  path: Array<{ x: number, y: number }>;\n  collision: GridsterItemComponentInterface | boolean = false;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n\n  destroy(): void {\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n    delete this.collision;\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e: any): void {\n    switch (e.which) {\n      case 1:\n        // left mouse button\n        break;\n      case 2:\n      case 3:\n        // right or middle mouse button\n        return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0});\n  }\n\n  dragMove(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse,\n      this.calculateItemPositionFromMousePosition.bind(this));\n\n    this.calculateItemPositionFromMousePosition(e);\n  }\n\n  calculateItemPositionFromMousePosition(e: any): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.calculateItemPosition();\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n\n    cancelScroll();\n    this.cancelOnBlur();\n    this.mousemove();\n    this.mouseup();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    this.path = [];\n    if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n      Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n    } else {\n      this.makeDrag();\n    }\n    setTimeout(() => {\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle(true);\n      }\n    });\n  }\n\n  cancelDrag() {\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.swap.restoreSwapItem();\n    this.push.destroy();\n    delete this.push;\n    this.swap.destroy();\n    delete this.swap;\n  }\n\n  makeDrag() {\n    if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n      && this.gridster.options.draggable.dropOverItemsCallback\n      && this.collision && this.collision !== true && this.collision.$item) {\n      this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n    }\n    this.collision = false;\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.swap.setSwapItem();\n    this.push.destroy();\n    delete this.push;\n    this.swap.destroy();\n    delete this.swap;\n  }\n\n  calculateItemPosition() {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n    this.gridsterItem.$item.y = this.positionY;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n    const transform = 'translate(' + this.left + 'px, ' + this.top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y});\n      }\n      this.push.checkPushBack();\n    }\n    this.gridster.previewStyle(true);\n  }\n\n  toggle() {\n    const enableDrag = this.gridsterItem.canBeDragged();\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.dragStartFunction = this.dragStartDelay.bind(this);\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStartDelay(e: any): void {\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n      return;\n    }\n    if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n      return;\n    }\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.draggable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.draggable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: any) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Injectable()\nexport class GridsterPushResize {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsPath: Array<Array<GridsterItem>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private tryPattern: {\n    fromEast: Function,\n    fromWest: Function,\n    fromNorth: Function,\n    fromSouth: Function,\n    [key: string]: Function\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    delete this.gridster;\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string): boolean {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems() {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    const gridsterItemCollision: any = this.gridster.checkCollision(gridsterItem.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true &&\n      gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n    return false;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n    if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([\n        {\n          x: gridsterItem.item.x || 0,\n          y: gridsterItem.item.y || 0,\n          cols: gridsterItem.item.cols || 0,\n          rows: gridsterItem.item.rows || 0\n        },\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push(\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        });\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition: { x: number, y: number, cols: number, rows: number }, x, y, cols, rows;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n    return false;\n  }\n}\n","import {Injectable, NgZone} from '@angular/core';\n\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterPushResize} from './gridsterPushResize.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\n@Injectable()\nexport class GridsterResizable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  itemBackup: Array<number>;\n  resizeEventScrollType: GridsterResizeEventType;\n  directionFunction: Function;\n  dragFunction: (event: any) => void;\n  dragStopFunction: (event: any) => void;\n  resizeEnabled: boolean;\n  mousemove: Function;\n  mouseup: Function;\n  cancelOnBlur: Function;\n  touchmove: Function;\n  touchend: Function;\n  touchcancel: Function;\n  push: GridsterPush;\n  pushResize: GridsterPushResize;\n  minHeight: number;\n  minWidth: number;\n  offsetTop: number;\n  offsetLeft: number;\n  diffTop: number;\n  diffLeft: number;\n  diffRight: number;\n  diffBottom: number;\n  margin: number;\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  width: number;\n  height: number;\n  newPosition: number;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {w: false, e: false, n: false, s: false};\n  }\n\n  destroy(): void {\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    delete this.gridsterItem;\n    delete this.gridster;\n  }\n\n  dragStart(e: any): void {\n    switch (e.which) {\n      case 1:\n        // left mouse button\n        break;\n      case 2:\n      case 3:\n        // right or middle mouse button\n        return;\n    }\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n      - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n      - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.directionFunction = this.handleN;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.directionFunction = this.handleS;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleE;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleNW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleNE;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.resizeEventScrollType.w = true;\n      this.directionFunction = this.handleSW;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.resizeEventScrollType.e = true;\n      this.directionFunction = this.handleSE;\n    }\n  }\n\n  dragMove(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true,\n      this.resizeEventScrollType);\n    this.directionFunction(e);\n\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: any): void {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.mousemove();\n    this.mouseup();\n    this.cancelOnBlur();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n      Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n    } else {\n      this.makeResize();\n    }\n    setTimeout(() => {\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n  }\n\n  cancelResize(): void {\n    this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n    this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.pushResize.restoreItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  makeResize(): void {\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.pushResize.setPushedItems();\n    this.push.destroy();\n    delete this.push;\n    this.pushResize.destroy();\n    delete this.pushResize;\n  }\n\n  handleN(e: any): void {\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.height = this.bottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n      this.top = this.bottom - this.minHeight;\n    }\n    this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n    if (this.gridsterItem.$item.y !== this.newPosition) {\n      this.itemBackup[1] = this.gridsterItem.$item.y;\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n      this.gridsterItem.$item.y = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromSouth);\n      this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.itemBackup[1];\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemTop(this.top);\n    this.setItemHeight(this.height);\n  }\n\n  handleW(e: any): void {\n    this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    this.width = this.right - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n      this.left = this.right - this.minWidth;\n    }\n    this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n    if (this.gridsterItem.$item.x !== this.newPosition) {\n      this.itemBackup[0] = this.gridsterItem.$item.x;\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n      this.gridsterItem.$item.x = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromEast);\n      this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.itemBackup[0];\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemLeft(this.left);\n    this.setItemWidth(this.width);\n  }\n\n  handleS(e: any): void {\n    this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n    }\n    this.bottom = this.top + this.height;\n    this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n    if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n      this.pushResize.pushItems(this.pushResize.fromNorth);\n      this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemHeight(this.height);\n  }\n\n  handleE(e: any): void {\n    this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n    }\n    this.right = this.left + this.width;\n    this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n    if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n      this.pushResize.pushItems(this.pushResize.fromWest);\n      this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemWidth(this.width);\n  }\n\n  handleNW(e: any): void {\n    this.handleN(e);\n    this.handleW(e);\n  }\n\n  handleNE(e: any): void {\n    this.handleN(e);\n    this.handleE(e);\n  }\n\n  handleSW(e: any): void {\n    this.handleS(e);\n    this.handleW(e);\n  }\n\n  handleSE(e: any): void {\n    this.handleS(e);\n    this.handleE(e);\n  }\n\n  toggle(): void {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e: any): void {\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: any) {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag() {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top: number): void {\n    const transform = 'translate(' + this.left + 'px, ' + top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n  }\n\n  setItemLeft(left: number): void {\n    const transform = 'translate(' + left + 'px, ' + this.top + 'px)';\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n  }\n\n  setItemHeight(height: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n}\n","import {Component, ElementRef, Host, Input, NgZone, OnDestroy, OnInit, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterItem} from './gridsterItem.interface';\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItemComponentInterface} from './gridsterItemComponent.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-item',\n  template: `<ng-content></ng-content>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.s || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-s\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.e || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-e\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.n || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-n\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.w || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-w\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.se || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-se\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.ne || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-ne\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.sw || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-sw\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.nw || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-nw\"></div>\n`,\n  styles: [`gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:0s;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:n-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:e-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:s-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:w-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterItemComponent implements OnInit, OnDestroy, GridsterItemComponentInterface {\n  @Input() item: GridsterItem;\n  $item: GridsterItem;\n  el: any;\n  gridster: GridsterComponent;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  init: boolean;\n\n  constructor(el: ElementRef, @Host() gridster: GridsterComponent, public renderer: Renderer2, private zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1,\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n\n  ngOnInit(): void {\n    this.updateOptions();\n    this.gridster.addItem(this);\n  }\n\n  updateOptions(): void {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      dragEnabled: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined,\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.gridster.removeItem(this);\n    delete this.gridster;\n    this.drag.destroy();\n    delete this.drag;\n    this.resize.destroy();\n    delete this.resize;\n  }\n\n  setSize(): void {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n\n  updateItemSize() {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n    }\n    this.top = top;\n    this.left = left;\n  }\n\n  itemChanged(): void {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n  }\n\n  checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayoutDebounce();\n      this.itemChanged();\n    }\n  }\n\n  canBeDragged(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n  }\n\n  canBeResized(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n  }\n\n}\n","import {Component, ElementRef, Host, OnDestroy, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-preview',\n  template: '',\n  styles: [`gridster-preview{display:none;background:rgba(0,0,0,.15)}`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterPreviewComponent implements OnDestroy {\n  el: any;\n  gridster: GridsterComponent;\n\n  constructor(el: ElementRef, @Host() gridster: GridsterComponent, public renderer: Renderer2) {\n    this.el = el.nativeElement;\n    this.gridster = gridster;\n    this.gridster.previewStyle = this.previewStyle.bind(this);\n  }\n\n  ngOnDestroy(): void {\n    delete this.el;\n    delete this.gridster.previewStyle;\n    delete this.gridster;\n  }\n\n  previewStyle(drag?: boolean): void {\n    if (!this.gridster.movingItem) {\n      this.renderer.setStyle(this.el, 'display', '');\n    } else {\n      if (this.gridster.compact && drag) {\n        this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n      }\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\nimport {GridsterItemComponent} from './gridsterItem.component';\nimport {GridsterPreviewComponent} from './gridsterPreview.component';\n\n@NgModule({\n  declarations: [\n    GridsterComponent,\n    GridsterItemComponent,\n    GridsterPreviewComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [GridsterComponent, GridsterItemComponent],\n  providers: [],\n  bootstrap: []\n})\nexport class GridsterModule {\n}\n"]}