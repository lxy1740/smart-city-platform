import { Injectable, Inject, Directive, EventEmitter, Input, Output, Component, ViewChild, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} obj
 * @return {?}
 */
function isNull(obj) {
    return obj === null || obj === undefined;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isUndefined(obj) {
    return obj === undefined;
}
/**
 * @param {?} obj
 * @return {?}
 */
function isBoolean(obj) {
    return Object.prototype.toString.call(obj) === '[object Boolean]';
}
/**
 * @param {?} obj
 * @return {?}
 */
function isFunction(obj) {
    return Object.prototype.toString.call(obj) === '[object Function]';
}
/**
 * @param {?} obj
 * @return {?}
 */
function isString(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
}
/**
 * @template T
 * @param {?} obj
 * @param {...?} keys
 * @return {?}
 */
function omit(obj) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    var /** @type {?} */ rawKeys = Object.keys(obj);
    var /** @type {?} */ finalKeys = rawKeys.filter(function (k) { return keys.indexOf(k) < 0; });
    return finalKeys.reduce(function (p, v) {
        p[v] = obj[v];
        return p;
    }, /** @type {?} */ ({}));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} opts
 * @return {?}
 */
function toPoint(opts) {
    if (!opts) {
        return new window.BMap.Point();
    }
    return new window.BMap.Point(opts.lng, opts.lat);
}
/**
 * @param {?} opts
 * @return {?}
 */
function toPoints(opts) {
    if (!opts) {
        return [];
    }
    return opts.map(function (p) {
        return new window.BMap.Point(p.lng, p.lat);
    });
}
/**
 * @param {?} opts
 * @return {?}
 */
function toSize(opts) {
    if (!opts) {
        return new window.BMap.Size();
    }
    return new window.BMap.Size(opts.width, opts.height);
}
/**
 * @param {?} url
 * @param {?} size
 * @param {?} options
 * @return {?}
 */
function toIcon(url, size, options) {
    if (!size && !options) {
        return new window.BMap.Icon(url);
    }
    if (!size) {
        return new window.BMap.Icon(url, toSize(size));
    }
    var /** @type {?} */ iconOptions = {
        anchor: toSize(options.anchor),
        imageOffset: toSize(options.imageOffset),
        infoWindowAnchor: toSize(options.infoWindowAnchor),
        printImageUrl: options.printImageUrl
    };
    var /** @type {?} */ icon = new window.BMap.Icon(url, toSize(size), iconOptions);
    if (options.imageSize) {
        icon.setImageSize(toSize(options.imageSize));
    }
    return icon;
}
/**
 * @param {?} options
 * @return {?}
 */
function toMarkerOptions(options) {
    var /** @type {?} */ opts = {};
    if (!options) {
        return opts;
    }
    if (options.offset) {
        opts.offset = toSize(options.offset);
    }
    if (options.icon) {
        opts.icon = toIcon(options.icon.imageUrl, options.icon.size, options.icon);
    }
    if (!isNull(options.enableMassClear)) {
        opts.enableMassClear = options.enableMassClear;
    }
    if (!isNull(options.enableDragging)) {
        opts.enableDragging = options.enableDragging;
    }
    if (!isNull(options.enableClicking)) {
        opts.enableClicking = options.enableClicking;
    }
    if (!isNull(options.raiseOnDrag)) {
        opts.raiseOnDrag = options.raiseOnDrag;
    }
    if (!isNull(options.draggingCursor)) {
        opts.draggingCursor = options.draggingCursor;
    }
    if (!isNull(options.rotation)) {
        opts.rotation = options.rotation;
    }
    if (!isNull(options.title)) {
        opts.title = options.title;
    }
    if (!isNull(options.shadow)) {
        opts.shadow = toIcon(options.shadow.imageUrl, options.shadow.size, options.shadow);
    }
    return opts;
}
/**
 * @param {?} options
 * @return {?}
 */
function toNavigationControlOptions(options) {
    var /** @type {?} */ opts = {};
    if (!options) {
        return opts;
    }
    if (!isNull(options.anchor)) {
        opts.anchor = options.anchor;
    }
    if (!isNull(options.enableGeolocation)) {
        opts.enableGeolocation = options.enableGeolocation;
    }
    if (!isNull(options.offset)) {
        opts.offset = toSize(options.offset);
    }
    if (!isNull(options.showZoomInfo)) {
        opts.showZoomInfo = options.showZoomInfo;
    }
    if (!isNull(options.type)) {
        opts.type = options.type;
    }
    return opts;
}
/**
 * @param {?} options
 * @return {?}
 */
function toOverviewMapControlOptions(options) {
    var /** @type {?} */ opts = {};
    if (!options) {
        return opts;
    }
    if (!isNull(options.anchor)) {
        opts.anchor = options.anchor;
    }
    if (!isNull(options.isOpen)) {
        opts.isOpen = options.isOpen;
    }
    if (!isNull(options.offset)) {
        opts.offset = toSize(options.offset);
    }
    if (!isNull(options.size)) {
        opts.size = toSize(options.size);
    }
    return opts;
}
/**
 * @param {?} options
 * @return {?}
 */
function toScaleControlOptions(options) {
    var /** @type {?} */ opts = {};
    if (!options) {
        return opts;
    }
    if (!isNull(options.anchor)) {
        opts.anchor = options.anchor;
    }
    if (!isNull(options.offset)) {
        opts.offset = toSize(options.offset);
    }
    return opts;
}
/**
 * @param {?} options
 * @return {?}
 */
function toMapTypeControlOptions(options) {
    var /** @type {?} */ opts = {};
    if (!options) {
        return opts;
    }
    if (!isNull(options.type)) {
        opts.type = options.type;
    }
    return opts;
}
/**
 * @param {?} options
 * @return {?}
 */
function toGeolocationOptions(options) {
    var /** @type {?} */ opts = {};
    if (!options) {
        return opts;
    }
    if (!isNull(options.anchor)) {
        opts.anchor = options.anchor;
    }
    if (!isNull(options.offset)) {
        opts.offset = toSize(options.offset);
    }
    if (!isNull(options.enableAutoLocation)) {
        opts.enableAutoLocation = options.enableAutoLocation;
    }
    if (!isNull(options.locationIcon)) {
        opts.locationIcon = toIcon(options.locationIcon.imageUrl, options.locationIcon.size, options.locationIcon);
    }
    if (!isNull(options.showAddressBar)) {
        opts.showAddressBar = options.showAddressBar;
    }
    return opts;
}
/**
 * @param {?} style
 * @return {?}
 */
function toTextIconStyle(style) {
    var /** @type {?} */ realStyle = {
        url: style.url,
        size: toSize(style.size)
    };
    if (style.anchor) {
        realStyle.anchor = toSize(style.anchor);
    }
    if (style.offset) {
        realStyle.offset = toSize(style.offset);
    }
    if (!isNull(style.textSize)) {
        realStyle.textSize = style.textSize;
    }
    if (!isNull(style.textColor)) {
        realStyle.textColor = style.textColor;
    }
    return realStyle;
}
/**
 * @param {?} options
 * @return {?}
 */
function toMarkerClustererOptions(options) {
    var /** @type {?} */ opts = {};
    if (!options) {
        return opts;
    }
    if (options.markers) {
        opts.markers = options.markers.map(function (m) { return new window.BMap.Marker(toPoint(m.point), toMarkerOptions(m.options)); });
    }
    if (!isNull(options.girdSize)) {
        opts.girdSize = options.girdSize;
    }
    if (!isNull(options.maxZoom)) {
        opts.maxZoom = options.maxZoom;
    }
    if (!isNull(options.minClusterSize)) {
        opts.minClusterSize = options.minClusterSize;
    }
    if (!isNull(options.isAverangeCenter)) {
        opts.isAverangeCenter = options.isAverangeCenter;
    }
    if (options.styles) {
        opts.styles = options.styles.filter(function (s) { return s; }).map(function (s) { return toTextIconStyle(s); });
    }
    return opts;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} obj
 * @param {?} msg
 * @return {?}
 */
function nullCheck(obj, msg) {
    if (isNull(obj)) {
        throw new Error(msg);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var LOADING_STATE = {
    NON: 0,
    LOADED: 1,
    LOADING: 2,
};
LOADING_STATE[LOADING_STATE.NON] = "NON";
LOADING_STATE[LOADING_STATE.LOADED] = "LOADED";
LOADING_STATE[LOADING_STATE.LOADING] = "LOADING";
var ScriptLoaderConfig = /** @class */ (function () {
    function ScriptLoaderConfig() {
        this.ak = '';
    }
    return ScriptLoaderConfig;
}());
window._scriptLoadState = {};
window._loadingCallbacks = {};
var ScriptLoader = /** @class */ (function () {
    function ScriptLoader() {
    }
    /**
     * @param {?} url
     * @param {?=} isMain
     * @param {?=} cb
     * @return {?}
     */
    ScriptLoader.prototype.load = /**
     * @param {?} url
     * @param {?=} isMain
     * @param {?=} cb
     * @return {?}
     */
    function (url, isMain, cb) {
        if (isMain === void 0) { isMain = false; }
        var /** @type {?} */ scriptKey = isString(url) ? url : url['key'];
        var /** @type {?} */ scriptUrls = isString(url) ? [url] : url['scripts'];
        if (window._scriptLoadState[scriptKey] === LOADING_STATE.LOADED) {
            if (isMain) {
                switchDisplay('baidu-map .baidu-map-instance', 'block');
                switchDisplay('baidu-map .baidu-map-offline', 'none');
            }
            return cb();
        }
        if (!window._loadingCallbacks[scriptKey]) {
            window._loadingCallbacks[scriptKey] = [];
        }
        if (window._scriptLoadState[scriptKey] === LOADING_STATE.LOADING) {
            window._loadingCallbacks[scriptKey].push(cb);
            return;
        }
        window._scriptLoadState[scriptKey] = LOADING_STATE.LOADING;
        window._loadingCallbacks[scriptKey].push(cb);
        if (isMain) {
            window.baidumapinit = function () {
                window._scriptLoadState[scriptKey] = LOADING_STATE.LOADED;
                switchDisplay('baidu-map .baidu-map-instance', 'block');
                switchDisplay('baidu-map .baidu-map-offline', 'none');
                window._loadingCallbacks[scriptKey].forEach(function (c) {
                    c();
                });
            };
        }
        appendScriptsTag(scriptKey, scriptUrls, isMain);
    };
    ScriptLoader.decorators = [
        { type: Injectable },
    ];
    return ScriptLoader;
}());
/**
 * @param {?} scriptKey
 * @param {?} urls
 * @param {?} isMain
 * @return {?}
 */
function appendScriptsTag(scriptKey, urls, isMain) {
    var /** @type {?} */ leftObj = {
        count: urls.length
    };
    urls.forEach(function (url) {
        appendScriptTag(scriptKey, url, isMain, leftObj);
    });
}
/**
 * @param {?} scriptKey
 * @param {?} url
 * @param {?} isMain
 * @param {?} leftObj
 * @return {?}
 */
function appendScriptTag(scriptKey, url, isMain, leftObj) {
    var /** @type {?} */ script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = url;
    script.onerror = function () {
        if (isMain) {
            switchDisplay('baidu-map .baidu-map-offline', 'block');
            switchDisplay('baidu-map .baidu-map-instance', 'none');
        }
        document.body.removeChild(script);
        setTimeout(function () {
            appendScriptTag(scriptKey, url, isMain, leftObj);
        }, 30000);
    };
    if (!isMain) {
        script.onload = function () {
            leftObj.count--;
            if (leftObj.count) {
                return;
            }
            window._scriptLoadState[scriptKey] = LOADING_STATE.LOADED;
            window._loadingCallbacks[scriptKey].forEach(function (c) {
                c();
            });
        };
    }
    document.body.appendChild(script);
}
/**
 * @param {?} selector
 * @param {?} state
 * @return {?}
 */
function switchDisplay(selector, state) {
    Array.prototype.slice.call(document.querySelectorAll(selector)).forEach(function (node) {
        node.style.display = state;
    });
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {string} */
var MapTypeEnum = {
    BMAP_NORMAL_MAP: 'BMAP_NORMAL_MAP',
    BMAP_PERSPECTIVE_MAP: 'BMAP_PERSPECTIVE_MAP',
    BMAP_SATELLITE_MAP: 'BMAP_SATELLITE_MAP',
    BMAP_HYBRID_MAP: 'BMAP_HYBRID_MAP',
};
/**
 * @param {?} maptype
 * @return {?}
 */
function isMapTypeEnum(maptype) {
    return !isFunction((/** @type {?} */ (maptype)).getTileLayer);
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MapService = /** @class */ (function () {
    function MapService(config, _loader) {
        var _this = this;
        this._loader = _loader;
        nullCheck(config.ak, 'ak must be provided');
        this._config = config;
        this._map = new Promise(function (resolve) {
            _this._mapResolver = resolve;
        });
    }
    /**
     * @param {?} el
     * @param {?} mapOptions
     * @return {?}
     */
    MapService.prototype.createMap = /**
     * @param {?} el
     * @param {?} mapOptions
     * @return {?}
     */
    function (el, mapOptions) {
        var _this = this;
        var /** @type {?} */ URL = "https://api.map.baidu.com/api?v=2.0&ak=" + this._config.ak + "&callback=baidumapinit&s=1";
        return new Promise(function (resolve) {
            _this._loader.load(URL, true, function () {
                var /** @type {?} */ map = new window.BMap.Map(el, omit(mapOptions, 'mapType'));
                _this.setOptions(mapOptions);
                _this._mapResolver(map);
                resolve(map);
            });
        });
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    MapService.prototype.setOptions = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        var disableDragging = opts.disableDragging, enableScrollWheelZoom = opts.enableScrollWheelZoom, disableDoubleClickZoom = opts.disableDoubleClickZoom, enableKeyboard = opts.enableKeyboard, enableInertialDragging = opts.enableInertialDragging, enableAutoResize = opts.enableAutoResize, enableContinuousZoom = opts.enableContinuousZoom, disablePinchToZoom = opts.disablePinchToZoom;
        if (isBoolean(disableDragging)) {
            this._map.then(function (map) { return map[(disableDragging ? 'disable' : 'enable') + 'Dragging'](); });
        }
        if (isBoolean(enableScrollWheelZoom)) {
            this._map.then(function (map) { return map[(enableScrollWheelZoom ? 'enable' : 'disable') + 'ScrollWheelZoom'](); });
        }
        if (isBoolean(enableAutoResize)) {
            this._map.then(function (map) { return map[(enableAutoResize ? 'enable' : 'disable') + 'AutoResize'](); });
        }
        if (isBoolean(disableDoubleClickZoom)) {
            this._map.then(function (map) { return map[(disableDoubleClickZoom ? 'disable' : 'enable') + 'DoubleClickZoom'](); });
        }
        if (isBoolean(enableKeyboard)) {
            this._map.then(function (map) { return map[(enableKeyboard ? 'enable' : 'disable') + 'Keyboard'](); });
        }
        if (isBoolean(enableInertialDragging)) {
            this._map.then(function (map) { return map[(enableInertialDragging ? 'enable' : 'disable') + 'InertialDragging'](); });
        }
        if (isBoolean(enableContinuousZoom)) {
            this._map.then(function (map) { return map[(enableContinuousZoom ? 'enable' : 'disable') + 'ContinuousZoom'](); });
        }
        if (isBoolean(disablePinchToZoom)) {
            this._map.then(function (map) { return map[(disablePinchToZoom ? 'disable' : 'enable') + 'PinchToZoom'](); });
        }
        if (!isNull(opts.cursor)) {
            this._map.then(function (map) { return map.setDefaultCursor(opts.cursor); });
        }
        if (!isNull(opts.draggingCursor)) {
            this._map.then(function (map) { return map.setDraggingCursor(opts.draggingCursor); });
        }
        if (!isNull(opts.currentCity)) {
            this._map.then(function (map) { return map.setCurrentCity(opts.currentCity); });
        }
        if (!isNull(opts.centerAndZoom)) {
            this._map.then(function (map) {
                map.centerAndZoom(toPoint(opts.centerAndZoom), opts.centerAndZoom.zoom);
            });
        }
        if (!isNull(opts.mapType)) {
            this._map.then(function (map) {
                var /** @type {?} */ realType = isMapTypeEnum(opts.mapType) ? window[opts.mapType] : opts.mapType;
                map.setMapType(realType);
            });
        }
    };
    /**
     * @param {?} cb
     * @return {?}
     */
    MapService.prototype.addOverlay = /**
     * @param {?} cb
     * @return {?}
     */
    function (cb) {
        return this._map.then(function (map) {
            var /** @type {?} */ overlay = cb(map);
            map.addOverlay(overlay);
            return { map: map, overlay: overlay };
        });
    };
    /**
     * @param {?} overlay
     * @return {?}
     */
    MapService.prototype.removeOverlay = /**
     * @param {?} overlay
     * @return {?}
     */
    function (overlay) {
        return this._map.then(function (map) {
            map.removeOverlay(overlay);
        });
    };
    /**
     * @param {?} cb
     * @return {?}
     */
    MapService.prototype.addTileLayer = /**
     * @param {?} cb
     * @return {?}
     */
    function (cb) {
        return this._map.then(function (map) {
            var /** @type {?} */ tilelayer = cb(map);
            map.addTileLayer(tilelayer);
            return { map: map, tilelayer: tilelayer };
        });
    };
    /**
     * @param {?} tilelayer
     * @return {?}
     */
    MapService.prototype.removeTileLayer = /**
     * @param {?} tilelayer
     * @return {?}
     */
    function (tilelayer) {
        return this._map.then(function (map) {
            map.removeOverlay(tilelayer);
        });
    };
    /**
     * @param {?} cb
     * @return {?}
     */
    MapService.prototype.addControl = /**
     * @param {?} cb
     * @return {?}
     */
    function (cb) {
        return this._map.then(function (map) {
            var /** @type {?} */ control = cb(map);
            map.addControl(control);
            return { map: map, control: control };
        });
    };
    /**
     * @param {?} control
     * @return {?}
     */
    MapService.prototype.removeControl = /**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        return this._map.then(function (map) {
            map.removeControl(control);
        });
    };
    /**
     * @return {?}
     */
    MapService.prototype.getNativeMap = /**
     * @return {?}
     */
    function () {
        return this._map;
    };
    MapService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    MapService.ctorParameters = function () { return [
        { type: ScriptLoaderConfig, decorators: [{ type: Inject, args: [ScriptLoaderConfig,] },] },
        { type: ScriptLoader, },
    ]; };
    return MapService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ControlComponent = /** @class */ (function () {
    function ControlComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        nullCheck(this.type, 'type is required for <control>');
        this._service
            .addControl(function () {
            _this.control = _this.createControl(_this.type, _this.options);
            return _this.control;
        })
            .then(function (_a) {
            var control = _a.control;
            _this.loaded.emit(control);
        });
    };
    /**
     * @return {?}
     */
    ControlComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeControl(this.control);
    };
    /**
     * @param {?} type
     * @param {?} options
     * @return {?}
     */
    ControlComponent.prototype.createControl = /**
     * @param {?} type
     * @param {?} options
     * @return {?}
     */
    function (type, options) {
        if (type === 'navigation') {
            return new window.BMap.NavigationControl(toNavigationControlOptions(options));
        }
        if (type === 'overviewmap') {
            return new window.BMap.OverviewMapControl(toOverviewMapControlOptions(options));
        }
        if (type === 'scale') {
            return new window.BMap.ScaleControl(toScaleControlOptions(options));
        }
        if (type === 'maptype') {
            return new window.BMap.MapTypeControl(toMapTypeControlOptions(options));
        }
        if (type === 'geolocation') {
            return new window.BMap.GeolocationControl(toGeolocationOptions(options));
        }
        if (type === 'panorama') {
            return new window.BMap.PanoramaControl();
        }
        throw new Error("Unsupported type:" + type + " of control");
    };
    ControlComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'control'
                },] },
    ];
    /** @nocollapse */
    ControlComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    ControlComponent.propDecorators = {
        "type": [{ type: Input },],
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return ControlComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MapComponent = /** @class */ (function () {
    function MapComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
        this.clicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        nullCheck(this.options, 'options is required for <baidu-map>');
        nullCheck(this.options.centerAndZoom, 'options.centerAndZoom is required for <baidu-map>');
        this._service
            .createMap(this.mapInstance.nativeElement, this.options)
            .then(function (map) {
            _this.loaded.emit(map);
            return map;
        })
            .then(function (map) {
            _this.addListener(map);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MapComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var /** @type {?} */ opts = /** @type {?} */ (changes["options"].currentValue);
        if (!opts) {
            return console.warn('MapOptions change was ignored since you are passing empty value');
        }
        this._service.setOptions(opts);
    };
    /**
     * @return {?}
     */
    MapComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        console.log('on map destroy');
    };
    /**
     * @param {?} map
     * @return {?}
     */
    MapComponent.prototype.addListener = /**
     * @param {?} map
     * @return {?}
     */
    function (map) {
        var _this = this;
        map.addEventListener('click', function (e) {
            _this.clicked.emit(e);
        });
    };
    MapComponent.decorators = [
        { type: Component, args: [{
                    providers: [MapService],
                    selector: 'baidu-map',
                    styles: [
                        "\n        .baidu-map-instance {\n            width: 100%;\n            height: 100%;\n            display: none;\n        }\n        .baidu-map-offline {\n            width: 100%;\n            height: 100%;\n            background-color: #E6E6E6;\n            position: relative;\n            display: none;\n        }\n        .baidu-map-offline label {\n            fontSize: 30px;\n            margin: 0;\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            margin-right: -50%;\n            transform: translate(-50%, -50%);\n        }\n        .tranclude-content {\n            display: none;\n        }\n        "
                    ],
                    template: "\n    <div #mapinstance class=\"baidu-map-instance\"></div>\n    <div class=\"baidu-map-offline\">\n        <label>{{ 'NO_NETWORK' }}</label>\n    </div>\n    <div class=\"tranclude-content\">\n        <ng-content></ng-content>\n    </div>\n    "
                },] },
    ];
    /** @nocollapse */
    MapComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    MapComponent.propDecorators = {
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
        "clicked": [{ type: Output },],
        "mapInstance": [{ type: ViewChild, args: ['mapinstance',] },],
    };
    return MapComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MarkerComponent = /** @class */ (function () {
    function MarkerComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
        this.clicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MarkerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        nullCheck(this.point, 'point is required for <marker>');
        this._service
            .addOverlay(function () {
            return (_this.marker = new window.BMap.Marker(toPoint(_this.point), toMarkerOptions(_this.options)));
        })
            .then(function (_a) {
            var map = _a.map;
            _this.loaded.emit(_this.marker);
            _this.addListener(_this.marker, map);
        })
            .then(function () {
            // workaround: it's weird that postion is set while constructing phase will make click event not working
            // workaround: it's weird that postion is set while constructing phase will make click event not working
            _this.marker.setPosition(new window.BMap.Point(_this.point.lng, _this.point.lat));
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MarkerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["point"] && !changes["point"].isFirstChange()) {
            this.marker.setPosition(toPoint(changes["point"].currentValue));
        }
        if (changes["options"] && !changes["options"].isFirstChange()) {
            this.setOptions(changes["options"].currentValue);
        }
    };
    /**
     * @return {?}
     */
    MarkerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeOverlay(this.marker);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    MarkerComponent.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (isNull(options)) {
            return;
        }
        if (!isNull(options.offset)) {
            this.marker.setOffset(toSize(options.offset));
        }
        if (!isNull(options.icon)) {
            this.marker.setIcon(toIcon(options.icon.imageUrl, options.icon.size, options.icon));
        }
        if (!isNull(options.enableMassClear)) {
            this.marker[(options.enableMassClear ? 'enable' : 'disable') + 'MassClear']();
        }
        if (!isNull(options.enableDragging)) {
            this.marker[(options.enableDragging ? 'enable' : 'disable') + 'Dragging']();
        }
        if (!isNull(options.rotation)) {
            this.marker.setRotation(options.rotation);
        }
        if (!isNull(options.shadow)) {
            this.marker.setShadow(toIcon(options.shadow.imageUrl, options.shadow.size, options.shadow));
        }
        if (!isNull(options.title)) {
            this.marker.setTitle(options.title);
        }
    };
    /**
     * @param {?} marker
     * @param {?} map
     * @return {?}
     */
    MarkerComponent.prototype.addListener = /**
     * @param {?} marker
     * @param {?} map
     * @return {?}
     */
    function (marker, map) {
        var _this = this;
        marker.addEventListener('click', function (e) {
            _this.clicked.emit({
                e: e,
                map: map,
                marker: marker
            });
        });
    };
    MarkerComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'marker'
                },] },
    ];
    /** @nocollapse */
    MarkerComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    MarkerComponent.propDecorators = {
        "point": [{ type: Input },],
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
        "clicked": [{ type: Output },],
    };
    return MarkerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PolylineComponent = /** @class */ (function () {
    function PolylineComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PolylineComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        nullCheck(this.points, 'points is required for <polyline>');
        this._service
            .addOverlay(function () {
            return (_this.polyline = new window.BMap.Polyline(toPoints(_this.points), _this.options));
        })
            .then(function () {
            _this.loaded.emit(_this.polyline);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PolylineComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["points"] && !changes["points"].isFirstChange()) {
            this.polyline.setPath(toPoints(changes["points"].currentValue));
        }
        if (changes["options"] && !changes["options"].isFirstChange()) {
            this.setOptions(changes["options"].currentValue);
        }
    };
    /**
     * @return {?}
     */
    PolylineComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeOverlay(this.polyline);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PolylineComponent.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (isNull(options)) {
            return;
        }
        if (!isUndefined(options.enableEditing)) {
            if (options.enableEditing) {
                this.polyline.enableEditing();
            }
            else {
                this.polyline.disableEditing();
            }
        }
        if (!isUndefined(options.enableMassClear)) {
            if (options.enableEditing) {
                this.polyline.enableMassClear();
            }
            else {
                this.polyline.disableMassClear();
            }
        }
        if (!isUndefined(options.strokeColor)) {
            this.polyline.setStrokeColor(options.strokeColor);
        }
        if (!isUndefined(options.strokeOpacity)) {
            this.polyline.setStrokeOpacity(options.strokeOpacity);
        }
        if (!isUndefined(options.strokeStyle)) {
            this.polyline.setStrokeStyle(options.strokeStyle);
        }
        if (!isUndefined(options.strokeWeight)) {
            this.polyline.setStrokeWeight(options.strokeWeight);
        }
    };
    PolylineComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'polyline'
                },] },
    ];
    /** @nocollapse */
    PolylineComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    PolylineComponent.propDecorators = {
        "points": [{ type: Input },],
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return PolylineComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CircleComponent = /** @class */ (function () {
    function CircleComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    CircleComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        nullCheck(this.center, 'center is required for <circle>');
        nullCheck(this.radius, 'center is required for <circle>');
        this._service
            .addOverlay(function () {
            return (_this.circle = new window.BMap.Circle(toPoint(_this.center), _this.radius, _this.options));
        })
            .then(function () {
            _this.loaded.emit(_this.circle);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CircleComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["center"] && !changes["center"].isFirstChange()) {
            this.circle.setCenter(toPoint(changes["center"].currentValue));
        }
        if (changes["radius"] && !changes["radius"].isFirstChange()) {
            this.circle.setRadius(changes["radius"].currentValue);
        }
        if (changes["options"] && !changes["options"].isFirstChange()) {
            this.setOptions(changes["options"].currentValue);
        }
    };
    /**
     * @return {?}
     */
    CircleComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeOverlay(this.circle);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    CircleComponent.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (isNull(options)) {
            return;
        }
        if (!isUndefined(options.enableEditing)) {
            if (options.enableEditing) {
                this.circle.enableEditing();
            }
            else {
                this.circle.disableEditing();
            }
        }
        if (!isUndefined(options.enableMassClear)) {
            if (options.enableEditing) {
                this.circle.enableMassClear();
            }
            else {
                this.circle.disableMassClear();
            }
        }
        if (!isUndefined(options.strokeColor)) {
            this.circle.setStrokeColor(options.strokeColor);
        }
        if (!isUndefined(options.fillColor)) {
            this.circle.setFillColor(options.fillColor);
        }
        if (!isUndefined(options.strokeOpacity)) {
            this.circle.setStrokeOpacity(options.strokeOpacity);
        }
        if (!isUndefined(options.fillOpacity)) {
            this.circle.setFillOpacity(options.fillOpacity);
        }
        if (!isUndefined(options.strokeStyle)) {
            this.circle.setStrokeStyle(options.strokeStyle);
        }
        if (!isUndefined(options.strokeWeight)) {
            this.circle.setStrokeWeight(options.strokeWeight);
        }
    };
    CircleComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'circle'
                },] },
    ];
    /** @nocollapse */
    CircleComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    CircleComponent.propDecorators = {
        "center": [{ type: Input },],
        "radius": [{ type: Input },],
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return CircleComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PolygonComponent = /** @class */ (function () {
    function PolygonComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    PolygonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        nullCheck(this.points, 'points is required for <polygon>');
        this._service
            .addOverlay(function () {
            return (_this.polygon = new window.BMap.Polygon(toPoints(_this.points), _this.options));
        })
            .then(function () {
            _this.loaded.emit(_this.polygon);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PolygonComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["points"] && !changes["points"].isFirstChange()) {
            this.polygon.setPath(toPoints(changes["points"].currentValue));
        }
        if (changes["options"] && !changes["options"].isFirstChange()) {
            this.setOptions(changes["options"].currentValue);
        }
    };
    /**
     * @return {?}
     */
    PolygonComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeOverlay(this.polygon);
    };
    /**
     * @param {?} options
     * @return {?}
     */
    PolygonComponent.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (isNull(options)) {
            return;
        }
        if (!isUndefined(options.enableEditing)) {
            if (options.enableEditing) {
                this.polygon.enableEditing();
            }
            else {
                this.polygon.disableEditing();
            }
        }
        if (!isUndefined(options.enableMassClear)) {
            if (options.enableEditing) {
                this.polygon.enableMassClear();
            }
            else {
                this.polygon.disableMassClear();
            }
        }
        if (!isUndefined(options.strokeColor)) {
            this.polygon.setStrokeColor(options.strokeColor);
        }
        if (!isUndefined(options.fillColor)) {
            this.polygon.setFillColor(options.fillColor);
        }
        if (!isUndefined(options.strokeOpacity)) {
            this.polygon.setStrokeOpacity(options.strokeOpacity);
        }
        if (!isUndefined(options.fillOpacity)) {
            this.polygon.setFillOpacity(options.fillOpacity);
        }
        if (!isUndefined(options.strokeStyle)) {
            this.polygon.setStrokeStyle(options.strokeStyle);
        }
        if (!isUndefined(options.strokeWeight)) {
            this.polygon.setStrokeWeight(options.strokeWeight);
        }
    };
    PolygonComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'polygon'
                },] },
    ];
    /** @nocollapse */
    PolygonComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    PolygonComponent.propDecorators = {
        "points": [{ type: Input },],
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return PolygonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ LIB_URL = "https://api.map.baidu.com/library/Heatmap/2.0/src/Heatmap_min.js";
var HeatmapComponent = /** @class */ (function () {
    function HeatmapComponent(_service, scriptLoader) {
        this._service = _service;
        this.scriptLoader = scriptLoader;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    HeatmapComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        nullCheck(this.dataset, 'dataset is required for <heatmap>');
        this._service.getNativeMap().then(function () {
            return _this.scriptLoader.load(LIB_URL, false, function () {
                _this._service
                    .addOverlay(function () {
                    return (_this.heatmap = new window.BMapLib.HeatmapOverlay(_this.options));
                })
                    .then(function () {
                    _this.loaded.emit(_this.heatmap);
                    if (_this.dataset) {
                        _this.heatmap.setDataSet(_this.dataset);
                    }
                });
            });
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    HeatmapComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["dataset"] && !changes["dataset"].isFirstChange()) {
            this.heatmap.setDataSet(changes["dataset"].currentValue);
        }
        if (changes["options"] && !changes["options"].isFirstChange()) {
            this.heatmap.setOptions(changes["options"].currentValue);
        }
    };
    /**
     * @return {?}
     */
    HeatmapComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeOverlay(this.heatmap);
    };
    HeatmapComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'heatmap'
                },] },
    ];
    /** @nocollapse */
    HeatmapComponent.ctorParameters = function () { return [
        { type: MapService, },
        { type: ScriptLoader, },
    ]; };
    HeatmapComponent.propDecorators = {
        "dataset": [{ type: Input },],
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return HeatmapComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TileLayderComponent = /** @class */ (function () {
    function TileLayderComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TileLayderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ func = this.getTilesUrl;
        this._service
            .addTileLayer(function () {
            _this.tilelayer = new window.BMap.TileLayer(_this.options);
            if (_this.getTilesUrl) {
                _this.tilelayer.getTilesUrl = function (tileCoord, zoom) {
                    return func(tileCoord, zoom);
                };
            }
            return _this.tilelayer;
        })
            .then(function () {
            _this.loaded.emit(_this.tilelayer);
        });
    };
    /**
     * @return {?}
     */
    TileLayderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeTileLayer(this.tilelayer);
    };
    TileLayderComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'tilelayer'
                },] },
    ];
    /** @nocollapse */
    TileLayderComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    TileLayderComponent.propDecorators = {
        "getTilesUrl": [{ type: Input },],
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return TileLayderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TrafficLayderComponent = /** @class */ (function () {
    function TrafficLayderComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TrafficLayderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._service
            .addTileLayer(function () {
            _this.trafficlayer = new window.BMap.TrafficLayer(_this.options);
            return _this.trafficlayer;
        })
            .then(function () {
            _this.loaded.emit(_this.trafficlayer);
        });
    };
    /**
     * @return {?}
     */
    TrafficLayderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeTileLayer(this.trafficlayer);
    };
    TrafficLayderComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'trafficlayer'
                },] },
    ];
    /** @nocollapse */
    TrafficLayderComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    TrafficLayderComponent.propDecorators = {
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return TrafficLayderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ LIB_URLS = {
    key: 'markerClusterer',
    scripts: [
        'https://api.map.baidu.com/library/MarkerClusterer/1.2/src/MarkerClusterer_min.js',
        'https://api.map.baidu.com/library/TextIconOverlay/1.2/src/TextIconOverlay_min.js'
    ]
};
var MarkerClustererComponent = /** @class */ (function () {
    function MarkerClustererComponent(_service, scriptLoader) {
        this._service = _service;
        this.scriptLoader = scriptLoader;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MarkerClustererComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        nullCheck(this.options, 'options is required for <marker-clusterer>');
        this._service.getNativeMap().then(function (map) {
            return _this.scriptLoader.load(LIB_URLS, false, function () {
                _this.markerClusterer = new window.BMapLib.MarkerClusterer(map, toMarkerClustererOptions(_this.options));
                _this.loaded.emit(_this.markerClusterer);
            });
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MarkerClustererComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["options"] && !changes["options"].isFirstChange()) {
            this.resetOptions(changes["options"].currentValue);
        }
    };
    /**
     * @param {?} options
     * @return {?}
     */
    MarkerClustererComponent.prototype.resetOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        if (options.markers) {
            this.markerClusterer.clearMarkers();
            this.markerClusterer.addMarkers(options.markers.map(function (m) { return new window.BMap.Marker(toPoint(m.point), toMarkerOptions(m.options)); }));
        }
        if (!isUndefined(options.girdSize)) {
            this.markerClusterer.setGridSize(options.girdSize);
        }
        if (!isUndefined(options.maxZoom)) {
            this.markerClusterer.setMaxZoom(options.maxZoom);
        }
        if (options.styles) {
            this.markerClusterer.setStyles(options.styles.filter(function (s) { return s; }).map(function (s) { return toTextIconStyle(s); }));
        }
    };
    /**
     * @return {?}
     */
    MarkerClustererComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.markerClusterer.clearMarkers();
    };
    MarkerClustererComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'marker-clusterer'
                },] },
    ];
    /** @nocollapse */
    MarkerClustererComponent.ctorParameters = function () { return [
        { type: MapService, },
        { type: ScriptLoader, },
    ]; };
    MarkerClustererComponent.propDecorators = {
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return MarkerClustererComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** @enum {number} */
var ControlAnchor = {
    BMAP_ANCHOR_TOP_LEFT: 0,
    BMAP_ANCHOR_TOP_RIGHT: 1,
    BMAP_ANCHOR_BOTTOM_LEFT: 2,
    BMAP_ANCHOR_BOTTOM_RIGHT: 3,
};
ControlAnchor[ControlAnchor.BMAP_ANCHOR_TOP_LEFT] = "BMAP_ANCHOR_TOP_LEFT";
ControlAnchor[ControlAnchor.BMAP_ANCHOR_TOP_RIGHT] = "BMAP_ANCHOR_TOP_RIGHT";
ControlAnchor[ControlAnchor.BMAP_ANCHOR_BOTTOM_LEFT] = "BMAP_ANCHOR_BOTTOM_LEFT";
ControlAnchor[ControlAnchor.BMAP_ANCHOR_BOTTOM_RIGHT] = "BMAP_ANCHOR_BOTTOM_RIGHT";
/** @enum {number} */
var NavigationControlType = {
    BMAP_NAVIGATION_CONTROL_LARGE: 0,
    BMAP_NAVIGATION_CONTROL_SMALL: 1,
    BMAP_NAVIGATION_CONTROL_PAN: 2,
    BMAP_NAVIGATION_CONTROL_ZOOM: 3,
};
NavigationControlType[NavigationControlType.BMAP_NAVIGATION_CONTROL_LARGE] = "BMAP_NAVIGATION_CONTROL_LARGE";
NavigationControlType[NavigationControlType.BMAP_NAVIGATION_CONTROL_SMALL] = "BMAP_NAVIGATION_CONTROL_SMALL";
NavigationControlType[NavigationControlType.BMAP_NAVIGATION_CONTROL_PAN] = "BMAP_NAVIGATION_CONTROL_PAN";
NavigationControlType[NavigationControlType.BMAP_NAVIGATION_CONTROL_ZOOM] = "BMAP_NAVIGATION_CONTROL_ZOOM";
/** @enum {number} */
var MapTypeControlType = {
    BMAP_MAPTYPE_CONTROL_HORIZONTAL: 0,
    BMAP_MAPTYPE_CONTROL_DROPDOWN: 1,
    BMAP_MAPTYPE_CONTROL_MAP: 2,
};
MapTypeControlType[MapTypeControlType.BMAP_MAPTYPE_CONTROL_HORIZONTAL] = "BMAP_MAPTYPE_CONTROL_HORIZONTAL";
MapTypeControlType[MapTypeControlType.BMAP_MAPTYPE_CONTROL_DROPDOWN] = "BMAP_MAPTYPE_CONTROL_DROPDOWN";
MapTypeControlType[MapTypeControlType.BMAP_MAPTYPE_CONTROL_MAP] = "BMAP_MAPTYPE_CONTROL_MAP";
/** @enum {string} */
var LengthUnit = {
    BMAP_UNIT_METRIC: 'metric',
    BMAP_UNIT_IMPERIAL: 'us',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var BaiduMapModule = /** @class */ (function () {
    function BaiduMapModule() {
    }
    /**
     * @param {?=} _config
     * @return {?}
     */
    BaiduMapModule.forRoot = /**
     * @param {?=} _config
     * @return {?}
     */
    function (_config) {
        return {
            ngModule: BaiduMapModule,
            providers: [{ provide: ScriptLoaderConfig, useValue: _config }, ScriptLoader]
        };
    };
    BaiduMapModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        MapComponent,
                        MarkerComponent,
                        ControlComponent,
                        PolylineComponent,
                        CircleComponent,
                        PolygonComponent,
                        HeatmapComponent,
                        TileLayderComponent,
                        TrafficLayderComponent,
                        MarkerClustererComponent
                    ],
                    exports: [
                        MapComponent,
                        MarkerComponent,
                        ControlComponent,
                        PolylineComponent,
                        CircleComponent,
                        PolygonComponent,
                        HeatmapComponent,
                        TileLayderComponent,
                        TrafficLayderComponent,
                        MarkerClustererComponent
                    ]
                },] },
    ];
    return BaiduMapModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { BaiduMapModule, MapTypeEnum, ControlAnchor, LengthUnit, NavigationControlType, MapTypeControlType, CircleComponent as ɵh, ControlComponent as ɵf, HeatmapComponent as ɵj, MapComponent as ɵa, MarkerComponent as ɵe, MarkerClustererComponent as ɵm, PolygonComponent as ɵi, PolylineComponent as ɵg, TileLayderComponent as ɵk, TrafficLayderComponent as ɵl, MapService as ɵb, ScriptLoader as ɵd, ScriptLoaderConfig as ɵc };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,