/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { ControlComponent } from './components/control.component';
import { MapComponent } from './components/map.component';
import { MarkerComponent } from './components/marker.component';
import { PolylineComponent } from './components/polyline.component';
import { CircleComponent } from './components/circle.component';
import { PolygonComponent } from './components/polygon.component';
import { HeatmapComponent } from './components/heatmap.component';
import { TileLayderComponent } from './components/tilelayer.component';
import { TrafficLayderComponent } from './components/trafficlayer.component';
import { MarkerClustererComponent } from './components/markerClusterer.component';
import { ScriptLoader, ScriptLoaderConfig } from './providers/scriptLoader';
export class BaiduMapModule {
    /**
     * @param {?=} _config
     * @return {?}
     */
    static forRoot(_config) {
        return {
            ngModule: BaiduMapModule,
            providers: [{ provide: ScriptLoaderConfig, useValue: _config }, ScriptLoader]
        };
    }
}
BaiduMapModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    MapComponent,
                    MarkerComponent,
                    ControlComponent,
                    PolylineComponent,
                    CircleComponent,
                    PolygonComponent,
                    HeatmapComponent,
                    TileLayderComponent,
                    TrafficLayderComponent,
                    MarkerClustererComponent
                ],
                exports: [
                    MapComponent,
                    MarkerComponent,
                    ControlComponent,
                    PolylineComponent,
                    CircleComponent,
                    PolygonComponent,
                    HeatmapComponent,
                    TileLayderComponent,
                    TrafficLayderComponent,
                    MarkerClustererComponent
                ]
            },] },
];
function BaiduMapModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    BaiduMapModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    BaiduMapModule.ctorParameters;
}
export { MapTypeEnum } from './types/Map';
export { ControlAnchor, LengthUnit, NavigationControlType, MapTypeControlType } from './types/Control';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi1iYWlkdS1tYXAvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDakUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQTtBQUMvRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUNuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDL0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDakUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFDdEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUNBQXFDLENBQUE7QUFDNUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sd0NBQXdDLENBQUE7QUFDakYsT0FBTyxFQUFpQixZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQStCMUYsTUFBTTs7Ozs7SUFDRyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQTRCO1FBQ2hELE1BQU0sQ0FBQztZQUNMLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRSxZQUFZLENBQUM7U0FDOUUsQ0FBQTs7OztZQS9CSixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLFlBQVk7b0JBQ1osZUFBZTtvQkFDZixnQkFBZ0I7b0JBQ2hCLGlCQUFpQjtvQkFDakIsZUFBZTtvQkFDZixnQkFBZ0I7b0JBQ2hCLGdCQUFnQjtvQkFDaEIsbUJBQW1CO29CQUNuQixzQkFBc0I7b0JBQ3RCLHdCQUF3QjtpQkFDekI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osZUFBZTtvQkFDZixnQkFBZ0I7b0JBQ2hCLGlCQUFpQjtvQkFDakIsZUFBZTtvQkFDZixnQkFBZ0I7b0JBQ2hCLGdCQUFnQjtvQkFDaEIsbUJBQW1CO29CQUNuQixzQkFBc0I7b0JBQ3RCLHdCQUF3QjtpQkFDekI7YUFDRjs7Ozs7Ozs7Ozs7QUFVRCxPQUFPLEVBQTRCLFdBQVcsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQWFuRSxPQUFPLEVBU0wsYUFBYSxFQUViLFVBQVUsRUFFVixxQkFBcUIsRUFJckIsa0JBQWtCLEVBQ25CLE1BQU0saUJBQWlCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5cbmltcG9ydCB7IENvbnRyb2xDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY29udHJvbC5jb21wb25lbnQnXG5pbXBvcnQgeyBNYXBDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbWFwLmNvbXBvbmVudCdcbmltcG9ydCB7IE1hcmtlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tYXJrZXIuY29tcG9uZW50J1xuaW1wb3J0IHsgUG9seWxpbmVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcG9seWxpbmUuY29tcG9uZW50J1xuaW1wb3J0IHsgQ2lyY2xlQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2NpcmNsZS5jb21wb25lbnQnXG5pbXBvcnQgeyBQb2x5Z29uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL3BvbHlnb24uY29tcG9uZW50J1xuaW1wb3J0IHsgSGVhdG1hcENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9oZWF0bWFwLmNvbXBvbmVudCdcbmltcG9ydCB7IFRpbGVMYXlkZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdGlsZWxheWVyLmNvbXBvbmVudCdcbmltcG9ydCB7IFRyYWZmaWNMYXlkZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvdHJhZmZpY2xheWVyLmNvbXBvbmVudCdcbmltcG9ydCB7IE1hcmtlckNsdXN0ZXJlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tYXJrZXJDbHVzdGVyZXIuY29tcG9uZW50J1xuaW1wb3J0IHsgTE9BRElOR19TVEFURSwgU2NyaXB0TG9hZGVyLCBTY3JpcHRMb2FkZXJDb25maWcgfSBmcm9tICcuL3Byb3ZpZGVycy9zY3JpcHRMb2FkZXInXG5cbmltcG9ydCB7IEJNYXAgfSBmcm9tICcuL3R5cGVzL0JNYXAnXG5pbXBvcnQgeyBCTWFwTGliIH0gZnJvbSAnLi90eXBlcy9CTWFwTGliJ1xuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBNYXBDb21wb25lbnQsXG4gICAgTWFya2VyQ29tcG9uZW50LFxuICAgIENvbnRyb2xDb21wb25lbnQsXG4gICAgUG9seWxpbmVDb21wb25lbnQsXG4gICAgQ2lyY2xlQ29tcG9uZW50LFxuICAgIFBvbHlnb25Db21wb25lbnQsXG4gICAgSGVhdG1hcENvbXBvbmVudCxcbiAgICBUaWxlTGF5ZGVyQ29tcG9uZW50LFxuICAgIFRyYWZmaWNMYXlkZXJDb21wb25lbnQsXG4gICAgTWFya2VyQ2x1c3RlcmVyQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBNYXBDb21wb25lbnQsXG4gICAgTWFya2VyQ29tcG9uZW50LFxuICAgIENvbnRyb2xDb21wb25lbnQsXG4gICAgUG9seWxpbmVDb21wb25lbnQsXG4gICAgQ2lyY2xlQ29tcG9uZW50LFxuICAgIFBvbHlnb25Db21wb25lbnQsXG4gICAgSGVhdG1hcENvbXBvbmVudCxcbiAgICBUaWxlTGF5ZGVyQ29tcG9uZW50LFxuICAgIFRyYWZmaWNMYXlkZXJDb21wb25lbnQsXG4gICAgTWFya2VyQ2x1c3RlcmVyQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgQmFpZHVNYXBNb2R1bGUge1xuICBwdWJsaWMgc3RhdGljIGZvclJvb3QoX2NvbmZpZz86IFNjcmlwdExvYWRlckNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogQmFpZHVNYXBNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IFNjcmlwdExvYWRlckNvbmZpZywgdXNlVmFsdWU6IF9jb25maWcgfSwgU2NyaXB0TG9hZGVyXVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBCTWFwSW5zdGFuY2UsIE1hcE9wdGlvbnMsIE1hcFR5cGVFbnVtIH0gZnJvbSAnLi90eXBlcy9NYXAnXG5leHBvcnQgeyBCTWFwVHlwZSB9IGZyb20gJy4vdHlwZXMvTWFwVHlwZSdcbmV4cG9ydCB7IEJQcm9qZWN0aW9uIH0gZnJvbSAnLi90eXBlcy9Qcm9qZWN0aW9uJ1xuZXhwb3J0IHsgUG9pbnQgfSBmcm9tICcuL3R5cGVzL1BvaW50J1xuZXhwb3J0IHsgQk1hcmtlciwgTWFya2VyLCBNYXJrZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcy9NYXJrZXInXG5leHBvcnQgeyBCUG9seWxpbmUsIFBvbHlsaW5lT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvUG9seWxpbmUnXG5leHBvcnQgeyBCQ2lyY2xlLCBDaXJjbGVPcHRpb25zIH0gZnJvbSAnLi90eXBlcy9DaXJjbGUnXG5leHBvcnQgeyBCUG9seWdvbiwgUG9seWdvbk9wdGlvbnMgfSBmcm9tICcuL3R5cGVzL1BvbHlnb24nXG5leHBvcnQgeyBCSGVhdG1hcCwgSGVhdG1hcE9wdGlvbnMsIEhlYXRtYXBEYXRhIH0gZnJvbSAnLi90eXBlcy9IZWF0bWFwJ1xuZXhwb3J0IHsgQlRpbGVMYXllciwgVGlsZUxheWVyT3B0aW9ucywgZ2V0VGlsZXNVcmxGdW5jIH0gZnJvbSAnLi90eXBlcy9UaWxlTGF5ZXInXG5leHBvcnQgeyBCVHJhZmZpY0xheWVyLCBUcmFmZmljTGF5ZXJPcHRpb25zLCBQcmVkaWN0RGF0ZSB9IGZyb20gJy4vdHlwZXMvVHJhZmZpY0xheWVyJ1xuZXhwb3J0IHsgQk1hcmtlckNsdXN0ZXJlciwgTWFya2VyQ2x1c3RlcmVyT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvTWFya2VyQ2x1c3RlcmVyJ1xuZXhwb3J0IHsgVGV4dEljb25TdHlsZSB9IGZyb20gJy4vdHlwZXMvVGV4dEljb25PdmVybGF5J1xuZXhwb3J0IHtcbiAgQkNvbnRyb2wsXG4gIEJOYXZpZ2F0aW9uQ29udHJvbCxcbiAgQk92ZXJ2aWV3TWFwQ29udHJvbCxcbiAgQlNjYWxlQ29udHJvbCxcbiAgQk1hcFR5cGVDb250cm9sLFxuICBCR2VvbG9jYXRpb25Db250cm9sLFxuICBCUGFub3JhbWFDb250cm9sQ29udHJvbCxcbiAgQ29udHJvbFR5cGUsXG4gIENvbnRyb2xBbmNob3IsXG4gIEdlb2xvY2F0aW9uQ29udHJvbE9wdGlvbnMsXG4gIExlbmd0aFVuaXQsXG4gIE5hdmlnYXRpb25Db250cm9sT3B0aW9ucyxcbiAgTmF2aWdhdGlvbkNvbnRyb2xUeXBlLFxuICBPdmVydmlld01hcENvbnRyb2xPcHRpb25zLFxuICBTY2FsZUNvbnRyb2xPcHRpb25zLFxuICBNYXBUeXBlQ29udHJvbE9wdGlvbnMsXG4gIE1hcFR5cGVDb250cm9sVHlwZVxufSBmcm9tICcuL3R5cGVzL0NvbnRyb2wnXG5leHBvcnQgeyBCSW5mb1dpbmRvd0NvbnN0cnVjdG9yLCBCSW5mb1dpbmRvd09wdGlvbnMgfSBmcm9tICcuL3R5cGVzL0luZm9XaW5kb3cnXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgX3NjcmlwdExvYWRTdGF0ZTogeyBbdXJsOiBzdHJpbmddOiBMT0FESU5HX1NUQVRFIH1cbiAgICBfbG9hZGluZ0NhbGxiYWNrczogeyBbdXJsOiBzdHJpbmddOiBBcnJheTwoKSA9PiB2b2lkPiB9XG4gICAgQk1hcDogQk1hcFxuICAgIEJNYXBMaWI6IEJNYXBMaWJcbiAgICBiYWlkdW1hcGluaXQ6ICgpID0+IHZvaWRcbiAgICBCTUFQX1BFUlNQRUNUSVZFX01BUDogYW55XG4gIH1cbn1cbiJdfQ==