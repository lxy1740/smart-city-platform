/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { isBoolean, isNull, omit } from '../helpers/object';
import { nullCheck } from '../helpers/validate';
import { ScriptLoaderConfig } from './scriptLoader';
import { isMapTypeEnum } from '../types/Map';
import { toPoint } from '../helpers/transformer';
import { ScriptLoader } from './scriptLoader';
export class MapService {
    /**
     * @param {?} config
     * @param {?} _loader
     */
    constructor(config, _loader) {
        this._loader = _loader;
        nullCheck(config.ak, 'ak must be provided');
        this._config = config;
        this._map = new Promise((resolve) => {
            this._mapResolver = resolve;
        });
    }
    /**
     * @param {?} el
     * @param {?} mapOptions
     * @return {?}
     */
    createMap(el, mapOptions) {
        const /** @type {?} */ URL = `https://api.map.baidu.com/api?v=2.0&ak=${this._config.ak}&callback=baidumapinit&s=1`;
        return new Promise(resolve => {
            this._loader.load(URL, true, () => {
                const /** @type {?} */ map = new window.BMap.Map(el, omit(mapOptions, 'mapType'));
                this.setOptions(mapOptions);
                this._mapResolver(map);
                resolve(map);
            });
        });
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    setOptions(opts) {
        const { disableDragging, enableScrollWheelZoom, disableDoubleClickZoom, enableKeyboard, enableInertialDragging, enableAutoResize, enableContinuousZoom, disablePinchToZoom } = opts;
        if (isBoolean(disableDragging)) {
            this._map.then(map => map[(disableDragging ? 'disable' : 'enable') + 'Dragging']());
        }
        if (isBoolean(enableScrollWheelZoom)) {
            this._map.then(map => map[(enableScrollWheelZoom ? 'enable' : 'disable') + 'ScrollWheelZoom']());
        }
        if (isBoolean(enableAutoResize)) {
            this._map.then(map => map[(enableAutoResize ? 'enable' : 'disable') + 'AutoResize']());
        }
        if (isBoolean(disableDoubleClickZoom)) {
            this._map.then(map => map[(disableDoubleClickZoom ? 'disable' : 'enable') + 'DoubleClickZoom']());
        }
        if (isBoolean(enableKeyboard)) {
            this._map.then(map => map[(enableKeyboard ? 'enable' : 'disable') + 'Keyboard']());
        }
        if (isBoolean(enableInertialDragging)) {
            this._map.then(map => map[(enableInertialDragging ? 'enable' : 'disable') + 'InertialDragging']());
        }
        if (isBoolean(enableContinuousZoom)) {
            this._map.then(map => map[(enableContinuousZoom ? 'enable' : 'disable') + 'ContinuousZoom']());
        }
        if (isBoolean(disablePinchToZoom)) {
            this._map.then(map => map[(disablePinchToZoom ? 'disable' : 'enable') + 'PinchToZoom']());
        }
        if (!isNull(opts.cursor)) {
            this._map.then(map => map.setDefaultCursor(opts.cursor));
        }
        if (!isNull(opts.draggingCursor)) {
            this._map.then(map => map.setDraggingCursor(opts.draggingCursor));
        }
        if (!isNull(opts.currentCity)) {
            this._map.then(map => map.setCurrentCity(opts.currentCity));
        }
        if (!isNull(opts.centerAndZoom)) {
            this._map.then(map => {
                map.centerAndZoom(toPoint(opts.centerAndZoom), opts.centerAndZoom.zoom);
            });
        }
        if (!isNull(opts.mapType)) {
            this._map.then(map => {
                const /** @type {?} */ realType = isMapTypeEnum(opts.mapType) ? window[opts.mapType] : opts.mapType;
                map.setMapType(realType);
            });
        }
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    addOverlay(cb) {
        return this._map.then((map) => {
            const /** @type {?} */ overlay = cb(map);
            map.addOverlay(overlay);
            return { map, overlay };
        });
    }
    /**
     * @param {?} overlay
     * @return {?}
     */
    removeOverlay(overlay) {
        return this._map.then((map) => {
            map.removeOverlay(overlay);
        });
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    addTileLayer(cb) {
        return this._map.then((map) => {
            const /** @type {?} */ tilelayer = cb(map);
            map.addTileLayer(tilelayer);
            return { map, tilelayer };
        });
    }
    /**
     * @param {?} tilelayer
     * @return {?}
     */
    removeTileLayer(tilelayer) {
        return this._map.then((map) => {
            map.removeOverlay(tilelayer);
        });
    }
    /**
     * @param {?} cb
     * @return {?}
     */
    addControl(cb) {
        return this._map.then((map) => {
            const /** @type {?} */ control = cb(map);
            map.addControl(control);
            return { map, control };
        });
    }
    /**
     * @param {?} control
     * @return {?}
     */
    removeControl(control) {
        return this._map.then((map) => {
            map.removeControl(control);
        });
    }
    /**
     * @return {?}
     */
    getNativeMap() {
        return this._map;
    }
}
MapService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MapService.ctorParameters = () => [
    { type: ScriptLoaderConfig, decorators: [{ type: Inject, args: [ScriptLoaderConfig,] },] },
    { type: ScriptLoader, },
];
function MapService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MapService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MapService.ctorParameters;
    /** @type {?} */
    MapService.prototype._config;
    /** @type {?} */
    MapService.prototype._map;
    /** @type {?} */
    MapService.prototype._mapResolver;
    /** @type {?} */
    MapService.prototype._loader;
}

//# sourceMappingURL=data:application/json;base64,