/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { MapService } from '../providers/mapService';
var TileLayderComponent = /** @class */ (function () {
    function TileLayderComponent(_service) {
        this._service = _service;
        this.loaded = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TileLayderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ func = this.getTilesUrl;
        this._service
            .addTileLayer(function () {
            _this.tilelayer = new window.BMap.TileLayer(_this.options);
            if (_this.getTilesUrl) {
                _this.tilelayer.getTilesUrl = function (tileCoord, zoom) {
                    return func(tileCoord, zoom);
                };
            }
            return _this.tilelayer;
        })
            .then(function () {
            _this.loaded.emit(_this.tilelayer);
        });
    };
    /**
     * @return {?}
     */
    TileLayderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._service.removeTileLayer(this.tilelayer);
    };
    TileLayderComponent.decorators = [
        { type: Directive, args: [{
                    selector: 'tilelayer'
                },] },
    ];
    /** @nocollapse */
    TileLayderComponent.ctorParameters = function () { return [
        { type: MapService, },
    ]; };
    TileLayderComponent.propDecorators = {
        "getTilesUrl": [{ type: Input },],
        "options": [{ type: Input },],
        "loaded": [{ type: Output },],
    };
    return TileLayderComponent;
}());
export { TileLayderComponent };
function TileLayderComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    TileLayderComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    TileLayderComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    TileLayderComponent.propDecorators;
    /** @type {?} */
    TileLayderComponent.prototype.getTilesUrl;
    /** @type {?} */
    TileLayderComponent.prototype.options;
    /** @type {?} */
    TileLayderComponent.prototype.loaded;
    /** @type {?} */
    TileLayderComponent.prototype.tilelayer;
    /** @type {?} */
    TileLayderComponent.prototype._service;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZWxheWVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXIyLWJhaWR1LW1hcC8iLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdGlsZWxheWVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFekYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFBOztJQWVsRCw2QkFBb0IsUUFBb0I7UUFBcEIsYUFBUSxHQUFSLFFBQVEsQ0FBWTtzQkFKYixJQUFJLFlBQVksRUFBRTtLQUlEOzs7O0lBRXJDLHNDQUFROzs7OztRQUNiLHFCQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFBO1FBRTdCLElBQUksQ0FBQyxRQUFRO2FBQ1YsWUFBWSxDQUFDO1lBQ1osS0FBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUV4RCxFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDckIsS0FBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsVUFBUyxTQUFpQixFQUFFLElBQVk7b0JBQ25FLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO2lCQUM3QixDQUFBO2FBQ0Y7WUFDRCxNQUFNLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQTtTQUN0QixDQUFDO2FBQ0QsSUFBSSxDQUFDO1lBQ0osS0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1NBQ2pDLENBQUMsQ0FBQTs7Ozs7SUFHQyx5Q0FBVzs7OztRQUNoQixJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUE7OztnQkFqQ2hELFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsV0FBVztpQkFDdEI7Ozs7Z0JBTlEsVUFBVTs7O2dDQVFoQixLQUFLOzRCQUNMLEtBQUs7MkJBRUwsTUFBTTs7OEJBYlQ7O1NBU2EsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuaW1wb3J0IHsgTWFwU2VydmljZSB9IGZyb20gJy4uL3Byb3ZpZGVycy9tYXBTZXJ2aWNlJ1xuaW1wb3J0IHsgQlRpbGVMYXllciwgVGlsZUxheWVyT3B0aW9ucywgZ2V0VGlsZXNVcmxGdW5jIH0gZnJvbSAnLi4vdHlwZXMvVGlsZUxheWVyJ1xuaW1wb3J0IHsgQlBpeGVsIH0gZnJvbSAnLi4vdHlwZXMvUGl4ZWwnXG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ3RpbGVsYXllcidcbn0pXG5leHBvcnQgY2xhc3MgVGlsZUxheWRlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgcHJpdmF0ZSBnZXRUaWxlc1VybDogZ2V0VGlsZXNVcmxGdW5jXG4gIEBJbnB1dCgpIHByaXZhdGUgb3B0aW9uczogVGlsZUxheWVyT3B0aW9uc1xuXG4gIEBPdXRwdXQoKSBwcml2YXRlIGxvYWRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gIHByaXZhdGUgdGlsZWxheWVyOiBCVGlsZUxheWVyXG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfc2VydmljZTogTWFwU2VydmljZSkge31cblxuICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgZnVuYyA9IHRoaXMuZ2V0VGlsZXNVcmxcblxuICAgIHRoaXMuX3NlcnZpY2VcbiAgICAgIC5hZGRUaWxlTGF5ZXIoKCkgPT4ge1xuICAgICAgICB0aGlzLnRpbGVsYXllciA9IG5ldyB3aW5kb3cuQk1hcC5UaWxlTGF5ZXIodGhpcy5vcHRpb25zKVxuXG4gICAgICAgIGlmICh0aGlzLmdldFRpbGVzVXJsKSB7XG4gICAgICAgICAgdGhpcy50aWxlbGF5ZXIuZ2V0VGlsZXNVcmwgPSBmdW5jdGlvbih0aWxlQ29vcmQ6IEJQaXhlbCwgem9vbTogbnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuYyh0aWxlQ29vcmQsIHpvb20pXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVsYXllclxuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5sb2FkZWQuZW1pdCh0aGlzLnRpbGVsYXllcilcbiAgICAgIH0pXG4gIH1cblxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5fc2VydmljZS5yZW1vdmVUaWxlTGF5ZXIodGhpcy50aWxlbGF5ZXIpXG4gIH1cbn1cbiJdfQ==