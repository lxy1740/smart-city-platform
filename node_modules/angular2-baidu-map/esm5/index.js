/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule } from '@angular/core';
import { ControlComponent } from './components/control.component';
import { MapComponent } from './components/map.component';
import { MarkerComponent } from './components/marker.component';
import { PolylineComponent } from './components/polyline.component';
import { CircleComponent } from './components/circle.component';
import { PolygonComponent } from './components/polygon.component';
import { HeatmapComponent } from './components/heatmap.component';
import { TileLayderComponent } from './components/tilelayer.component';
import { TrafficLayderComponent } from './components/trafficlayer.component';
import { MarkerClustererComponent } from './components/markerClusterer.component';
import { ScriptLoader, ScriptLoaderConfig } from './providers/scriptLoader';
var BaiduMapModule = /** @class */ (function () {
    function BaiduMapModule() {
    }
    /**
     * @param {?=} _config
     * @return {?}
     */
    BaiduMapModule.forRoot = /**
     * @param {?=} _config
     * @return {?}
     */
    function (_config) {
        return {
            ngModule: BaiduMapModule,
            providers: [{ provide: ScriptLoaderConfig, useValue: _config }, ScriptLoader]
        };
    };
    BaiduMapModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        MapComponent,
                        MarkerComponent,
                        ControlComponent,
                        PolylineComponent,
                        CircleComponent,
                        PolygonComponent,
                        HeatmapComponent,
                        TileLayderComponent,
                        TrafficLayderComponent,
                        MarkerClustererComponent
                    ],
                    exports: [
                        MapComponent,
                        MarkerComponent,
                        ControlComponent,
                        PolylineComponent,
                        CircleComponent,
                        PolygonComponent,
                        HeatmapComponent,
                        TileLayderComponent,
                        TrafficLayderComponent,
                        MarkerClustererComponent
                    ]
                },] },
    ];
    return BaiduMapModule;
}());
export { BaiduMapModule };
function BaiduMapModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    BaiduMapModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    BaiduMapModule.ctorParameters;
}
export { MapTypeEnum } from './types/Map';
export { ControlAnchor, LengthUnit, NavigationControlType, MapTypeControlType } from './types/Control';

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyMi1iYWlkdS1tYXAvIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFN0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDakUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFBO0FBQ3pELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQTtBQUMvRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUNuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDL0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDakUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFDdEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0scUNBQXFDLENBQUE7QUFDNUUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sd0NBQXdDLENBQUE7QUFDakYsT0FBTyxFQUFpQixZQUFZLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTs7Ozs7Ozs7SUFnQzFFLHNCQUFPOzs7O2NBQUMsT0FBNEI7UUFDaEQsTUFBTSxDQUFDO1lBQ0wsUUFBUSxFQUFFLGNBQWM7WUFDeEIsU0FBUyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFFLFlBQVksQ0FBQztTQUM5RSxDQUFBOzs7Z0JBL0JKLFFBQVEsU0FBQztvQkFDUixZQUFZLEVBQUU7d0JBQ1osWUFBWTt3QkFDWixlQUFlO3dCQUNmLGdCQUFnQjt3QkFDaEIsaUJBQWlCO3dCQUNqQixlQUFlO3dCQUNmLGdCQUFnQjt3QkFDaEIsZ0JBQWdCO3dCQUNoQixtQkFBbUI7d0JBQ25CLHNCQUFzQjt3QkFDdEIsd0JBQXdCO3FCQUN6QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixlQUFlO3dCQUNmLGdCQUFnQjt3QkFDaEIsaUJBQWlCO3dCQUNqQixlQUFlO3dCQUNmLGdCQUFnQjt3QkFDaEIsZ0JBQWdCO3dCQUNoQixtQkFBbUI7d0JBQ25CLHNCQUFzQjt3QkFDdEIsd0JBQXdCO3FCQUN6QjtpQkFDRjs7eUJBMUNEOztTQTJDYSxjQUFjOzs7Ozs7Ozs7O0FBUzNCLE9BQU8sRUFBNEIsV0FBVyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBYW5FLE9BQU8sRUFTTCxhQUFhLEVBRWIsVUFBVSxFQUVWLHFCQUFxQixFQUlyQixrQkFBa0IsRUFDbkIsTUFBTSxpQkFBaUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcblxuaW1wb3J0IHsgQ29udHJvbENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jb250cm9sLmNvbXBvbmVudCdcbmltcG9ydCB7IE1hcENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tYXAuY29tcG9uZW50J1xuaW1wb3J0IHsgTWFya2VyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL21hcmtlci5jb21wb25lbnQnXG5pbXBvcnQgeyBQb2x5bGluZUNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9wb2x5bGluZS5jb21wb25lbnQnXG5pbXBvcnQgeyBDaXJjbGVDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvY2lyY2xlLmNvbXBvbmVudCdcbmltcG9ydCB7IFBvbHlnb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvcG9seWdvbi5jb21wb25lbnQnXG5pbXBvcnQgeyBIZWF0bWFwQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2hlYXRtYXAuY29tcG9uZW50J1xuaW1wb3J0IHsgVGlsZUxheWRlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy90aWxlbGF5ZXIuY29tcG9uZW50J1xuaW1wb3J0IHsgVHJhZmZpY0xheWRlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy90cmFmZmljbGF5ZXIuY29tcG9uZW50J1xuaW1wb3J0IHsgTWFya2VyQ2x1c3RlcmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL21hcmtlckNsdXN0ZXJlci5jb21wb25lbnQnXG5pbXBvcnQgeyBMT0FESU5HX1NUQVRFLCBTY3JpcHRMb2FkZXIsIFNjcmlwdExvYWRlckNvbmZpZyB9IGZyb20gJy4vcHJvdmlkZXJzL3NjcmlwdExvYWRlcidcblxuaW1wb3J0IHsgQk1hcCB9IGZyb20gJy4vdHlwZXMvQk1hcCdcbmltcG9ydCB7IEJNYXBMaWIgfSBmcm9tICcuL3R5cGVzL0JNYXBMaWInXG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE1hcENvbXBvbmVudCxcbiAgICBNYXJrZXJDb21wb25lbnQsXG4gICAgQ29udHJvbENvbXBvbmVudCxcbiAgICBQb2x5bGluZUNvbXBvbmVudCxcbiAgICBDaXJjbGVDb21wb25lbnQsXG4gICAgUG9seWdvbkNvbXBvbmVudCxcbiAgICBIZWF0bWFwQ29tcG9uZW50LFxuICAgIFRpbGVMYXlkZXJDb21wb25lbnQsXG4gICAgVHJhZmZpY0xheWRlckNvbXBvbmVudCxcbiAgICBNYXJrZXJDbHVzdGVyZXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE1hcENvbXBvbmVudCxcbiAgICBNYXJrZXJDb21wb25lbnQsXG4gICAgQ29udHJvbENvbXBvbmVudCxcbiAgICBQb2x5bGluZUNvbXBvbmVudCxcbiAgICBDaXJjbGVDb21wb25lbnQsXG4gICAgUG9seWdvbkNvbXBvbmVudCxcbiAgICBIZWF0bWFwQ29tcG9uZW50LFxuICAgIFRpbGVMYXlkZXJDb21wb25lbnQsXG4gICAgVHJhZmZpY0xheWRlckNvbXBvbmVudCxcbiAgICBNYXJrZXJDbHVzdGVyZXJDb21wb25lbnRcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBCYWlkdU1hcE1vZHVsZSB7XG4gIHB1YmxpYyBzdGF0aWMgZm9yUm9vdChfY29uZmlnPzogU2NyaXB0TG9hZGVyQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBCYWlkdU1hcE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW3sgcHJvdmlkZTogU2NyaXB0TG9hZGVyQ29uZmlnLCB1c2VWYWx1ZTogX2NvbmZpZyB9LCBTY3JpcHRMb2FkZXJdXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IEJNYXBJbnN0YW5jZSwgTWFwT3B0aW9ucywgTWFwVHlwZUVudW0gfSBmcm9tICcuL3R5cGVzL01hcCdcbmV4cG9ydCB7IEJNYXBUeXBlIH0gZnJvbSAnLi90eXBlcy9NYXBUeXBlJ1xuZXhwb3J0IHsgQlByb2plY3Rpb24gfSBmcm9tICcuL3R5cGVzL1Byb2plY3Rpb24nXG5leHBvcnQgeyBQb2ludCB9IGZyb20gJy4vdHlwZXMvUG9pbnQnXG5leHBvcnQgeyBCTWFya2VyLCBNYXJrZXIsIE1hcmtlck9wdGlvbnMgfSBmcm9tICcuL3R5cGVzL01hcmtlcidcbmV4cG9ydCB7IEJQb2x5bGluZSwgUG9seWxpbmVPcHRpb25zIH0gZnJvbSAnLi90eXBlcy9Qb2x5bGluZSdcbmV4cG9ydCB7IEJDaXJjbGUsIENpcmNsZU9wdGlvbnMgfSBmcm9tICcuL3R5cGVzL0NpcmNsZSdcbmV4cG9ydCB7IEJQb2x5Z29uLCBQb2x5Z29uT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvUG9seWdvbidcbmV4cG9ydCB7IEJIZWF0bWFwLCBIZWF0bWFwT3B0aW9ucywgSGVhdG1hcERhdGEgfSBmcm9tICcuL3R5cGVzL0hlYXRtYXAnXG5leHBvcnQgeyBCVGlsZUxheWVyLCBUaWxlTGF5ZXJPcHRpb25zLCBnZXRUaWxlc1VybEZ1bmMgfSBmcm9tICcuL3R5cGVzL1RpbGVMYXllcidcbmV4cG9ydCB7IEJUcmFmZmljTGF5ZXIsIFRyYWZmaWNMYXllck9wdGlvbnMsIFByZWRpY3REYXRlIH0gZnJvbSAnLi90eXBlcy9UcmFmZmljTGF5ZXInXG5leHBvcnQgeyBCTWFya2VyQ2x1c3RlcmVyLCBNYXJrZXJDbHVzdGVyZXJPcHRpb25zIH0gZnJvbSAnLi90eXBlcy9NYXJrZXJDbHVzdGVyZXInXG5leHBvcnQgeyBUZXh0SWNvblN0eWxlIH0gZnJvbSAnLi90eXBlcy9UZXh0SWNvbk92ZXJsYXknXG5leHBvcnQge1xuICBCQ29udHJvbCxcbiAgQk5hdmlnYXRpb25Db250cm9sLFxuICBCT3ZlcnZpZXdNYXBDb250cm9sLFxuICBCU2NhbGVDb250cm9sLFxuICBCTWFwVHlwZUNvbnRyb2wsXG4gIEJHZW9sb2NhdGlvbkNvbnRyb2wsXG4gIEJQYW5vcmFtYUNvbnRyb2xDb250cm9sLFxuICBDb250cm9sVHlwZSxcbiAgQ29udHJvbEFuY2hvcixcbiAgR2VvbG9jYXRpb25Db250cm9sT3B0aW9ucyxcbiAgTGVuZ3RoVW5pdCxcbiAgTmF2aWdhdGlvbkNvbnRyb2xPcHRpb25zLFxuICBOYXZpZ2F0aW9uQ29udHJvbFR5cGUsXG4gIE92ZXJ2aWV3TWFwQ29udHJvbE9wdGlvbnMsXG4gIFNjYWxlQ29udHJvbE9wdGlvbnMsXG4gIE1hcFR5cGVDb250cm9sT3B0aW9ucyxcbiAgTWFwVHlwZUNvbnRyb2xUeXBlXG59IGZyb20gJy4vdHlwZXMvQ29udHJvbCdcbmV4cG9ydCB7IEJJbmZvV2luZG93Q29uc3RydWN0b3IsIEJJbmZvV2luZG93T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvSW5mb1dpbmRvdydcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBfc2NyaXB0TG9hZFN0YXRlOiB7IFt1cmw6IHN0cmluZ106IExPQURJTkdfU1RBVEUgfVxuICAgIF9sb2FkaW5nQ2FsbGJhY2tzOiB7IFt1cmw6IHN0cmluZ106IEFycmF5PCgpID0+IHZvaWQ+IH1cbiAgICBCTWFwOiBCTWFwXG4gICAgQk1hcExpYjogQk1hcExpYlxuICAgIGJhaWR1bWFwaW5pdDogKCkgPT4gdm9pZFxuICAgIEJNQVBfUEVSU1BFQ1RJVkVfTUFQOiBhbnlcbiAgfVxufVxuIl19